{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ProvisionGenie \u00b6 ProvisionGenie is an app for Microsoft Teams that lets you learn how your team can work best in Microsoft Teams. As Teams is a platform that can connect to a lot of services, we want to make your start even easier. We will skill you up and guide you through some questions regarding how your Team should look like and let you request the 'Team of your dreams' as a result of that process, which will be provisioned automatically for you. Core components of this solution \u00b6 Power Apps Canvas App which serves as our UI 5 Dataverse tables where we log all Teams requests 5 Azure Logic Apps flows which we use to provision the requested Teams How to get started \u00b6 Read our Fact sheet for Admins to understand the impact of ProvisionGenie Familiarize yourself with the Solution overview Understand our Architecture Decisions Use our Deployment Guide to deploy ProvisionGenie What does it cost? \u00b6 ProvisionGenie is an open-source project and we won't charge you for using, extending, or modifying it. For more information see our license To make the app work, you will need all of the following an Azure subscription -for more detail see Cost estimation a Power Apps per app or a Power Apps per user plan as we use Microsoft Dataverse to store data a Microsoft 365 license for every user who uses the app. Roadmap \u00b6 This is our very first Version 1.0.0. - it is our minimal l\u2665vable product and we are excited about this first release! For more info in versioning, head over to Release Notes . You can also have a look into our Roadmap to see what's coming in the future. Contributions \u00b6 We welcome contributions, we summarized how you can contribute in the Contribution guidelines . Feel free to contribute to ProvisionGenie and make it even better. Every contribution counts and everyone's voice matters. You can help us improve UI/UX fix documentation find (and fix) bugs extend use cases If you want to know more how that works, we created a Contribution Guide and also Issue templates to make it easy for you. We also listed some features that we would like to add in the future - but consciously decided to not build for our first release, as we wanted to ship rather sooner than later - to get your valuable feedback. Speaking of which: Please do submit your feedback , or just get in touch with us for a chat! Support us \u00b6 \ud83d\udc96 If you like this project, give it a \u2b50 and share it with your friends \ud83d\ude4f! Also, buy us coffee \u2615\u2615\u2615 - ProvisionGenie wouldn't be possible without it! Trademarks \u00b6 This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines . Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies. Disclaimer \u00b6 THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Home"},{"location":"#provisiongenie","text":"ProvisionGenie is an app for Microsoft Teams that lets you learn how your team can work best in Microsoft Teams. As Teams is a platform that can connect to a lot of services, we want to make your start even easier. We will skill you up and guide you through some questions regarding how your Team should look like and let you request the 'Team of your dreams' as a result of that process, which will be provisioned automatically for you.","title":"ProvisionGenie"},{"location":"#core-components-of-this-solution","text":"Power Apps Canvas App which serves as our UI 5 Dataverse tables where we log all Teams requests 5 Azure Logic Apps flows which we use to provision the requested Teams","title":"Core components of this solution"},{"location":"#how-to-get-started","text":"Read our Fact sheet for Admins to understand the impact of ProvisionGenie Familiarize yourself with the Solution overview Understand our Architecture Decisions Use our Deployment Guide to deploy ProvisionGenie","title":"How to get started"},{"location":"#what-does-it-cost","text":"ProvisionGenie is an open-source project and we won't charge you for using, extending, or modifying it. For more information see our license To make the app work, you will need all of the following an Azure subscription -for more detail see Cost estimation a Power Apps per app or a Power Apps per user plan as we use Microsoft Dataverse to store data a Microsoft 365 license for every user who uses the app.","title":"What does it cost?"},{"location":"#roadmap","text":"This is our very first Version 1.0.0. - it is our minimal l\u2665vable product and we are excited about this first release! For more info in versioning, head over to Release Notes . You can also have a look into our Roadmap to see what's coming in the future.","title":"Roadmap"},{"location":"#contributions","text":"We welcome contributions, we summarized how you can contribute in the Contribution guidelines . Feel free to contribute to ProvisionGenie and make it even better. Every contribution counts and everyone's voice matters. You can help us improve UI/UX fix documentation find (and fix) bugs extend use cases If you want to know more how that works, we created a Contribution Guide and also Issue templates to make it easy for you. We also listed some features that we would like to add in the future - but consciously decided to not build for our first release, as we wanted to ship rather sooner than later - to get your valuable feedback. Speaking of which: Please do submit your feedback , or just get in touch with us for a chat!","title":"Contributions"},{"location":"#support-us","text":"\ud83d\udc96 If you like this project, give it a \u2b50 and share it with your friends \ud83d\ude4f! Also, buy us coffee \u2615\u2615\u2615 - ProvisionGenie wouldn't be possible without it!","title":"Support us"},{"location":"#trademarks","text":"This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines . Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.","title":"Trademarks"},{"location":"#disclaimer","text":"THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Disclaimer"},{"location":"adminfactsheet/","text":"Admin Fact Sheet \u00b6 This Fact sheet shall give you as an administrator an overview about Admin Fact Sheet End User value of ProvisionGenie Cost to run ProvisionGenie Security Privacy Governance Deploy and maintain ProvisionGenie Update schedule Any other questions? End User value of ProvisionGenie \u00b6 The purpose of this app is to foster teamwork by letting owners-to-be of Microsoft Teams teams make smarter decisions on how a team can work in Teams. Usually, a business consultant would talk a team through assets that are available in Teams and Microsoft 365 and answer all questions with 'it depends'. They would explain that people usually confuse chat with task assignments \"could you please\" confuse email with status reports \"per my last email\" confuse SharePoint with a dumpster for any file in the world --> \"can you migrate this pile of mess to someone elses computer?\" The consultant would then show them what channels are made for, how a team can work with metadata on files and how staying on track works with Microsoft Lists. The consultant would ask them also if they wanted more learning material pinned to their brand new team and if they wanted the team of they dreams already be created for them, so that it works from Day 1. This is, what ProvisionGenie does. ProvisionGenie is now that consultant and provides users with a blended experience of learning about modern collaboration and assets that can be used in Teams and reflecting on how they want to work in Teams. Benefits: allows better understanding of how Teams works in general Tailor-fitted teams have higher adoption rates Mitigates Teams sprawl by preventing abandoned Teams Prevents \"stockpiled\" channels (and their SharePoint folder equivalents) Enables better adoption of the correct usage of SharePoint lists & libraries For more information head over to Canvas App Overview Cost to run ProvisionGenie \u00b6 ProvisionGenie itself is free, but you will need an Azure subscription to run the Logic Apps. Logic Apps are part of the free tier for up to 4000 actions. a Microsoft 365 license for every person who uses the app a Power Apps per app or Power Apps per user plan for every person who uses ProvisionGenie For more detail, head over to Cost estimation . Security \u00b6 We take security very serious and want you to make the informed decision, that ProvisionGenie is a good fit for your organization: You can't unintentionally overexpose data only by allowing Power Apps in your organization, as Power Apps does not provide users with access to any data assets that they don't already have access to Power Platform leverages Azure Active Directory to control user authentication & access to data In the Dataverse environment, access is controlled at three levels: Environment roles Resource permissions for Power Apps Dataverse security roles - Part of our solution is a special security role, so that that no one can bypass the canvas app. This way, data can't be over exposed. Conditional Access Policy via Azure AD Premium can be applied for Power Apps as well All Logic Apps handle authentication to Graph API with a Managed Identity, which means that there are no credentials, which could get exposed/leaked or need to be maintained. Privacy \u00b6 We do not collect any data about you or your users. We built ProvisionGenie for Microsoft Teams and all data stays in your tenant. More helpful resources: trust.microsoft.com Microsoft Privacy statement In detail report on Dynamics 365 and Power Platform:Availability, data location, language, and localization - PDF download Detailed information on geographical availability - Power BI report Governance \u00b6 We designed and built ProvisionGenie to be an enterprise-grade solution. ProvisionGenie can be monitored like every other Power platform solution within the Center of Excellence Starter Kit , which we highly recommend to use. Additionally, you can monitor the Logic Apps in the Azure portal . Deploy and maintain ProvisionGenie \u00b6 To get a better understanding of the architecture of ProvisionGenie we recommend to familiarize yourself first with our Solution overview and make sure you understand our Architecture Decisions Additionally we provide you with a pictured step by step Deployment Guide that walks you through the entire deployment process. If something doesn't work you can always raise an issue and we will help. Update schedule \u00b6 This is an open-source project and we welcome contributions . We will use semantic versioning : We will merge PRs about fixing defects or optimizing existing code fortnightly and release a patch which you can then use New features without breaking changes will be released in minor versions breaking changes will be released only in major versions You can familiarize yourself with our Roadmap to know what's coming when. Any other questions? \u00b6 Please let us know, we love to help! \ud83e\uddde","title":"Admin fact sheet"},{"location":"adminfactsheet/#admin-fact-sheet","text":"This Fact sheet shall give you as an administrator an overview about Admin Fact Sheet End User value of ProvisionGenie Cost to run ProvisionGenie Security Privacy Governance Deploy and maintain ProvisionGenie Update schedule Any other questions?","title":"Admin Fact Sheet"},{"location":"adminfactsheet/#end-user-value-of-provisiongenie","text":"The purpose of this app is to foster teamwork by letting owners-to-be of Microsoft Teams teams make smarter decisions on how a team can work in Teams. Usually, a business consultant would talk a team through assets that are available in Teams and Microsoft 365 and answer all questions with 'it depends'. They would explain that people usually confuse chat with task assignments \"could you please\" confuse email with status reports \"per my last email\" confuse SharePoint with a dumpster for any file in the world --> \"can you migrate this pile of mess to someone elses computer?\" The consultant would then show them what channels are made for, how a team can work with metadata on files and how staying on track works with Microsoft Lists. The consultant would ask them also if they wanted more learning material pinned to their brand new team and if they wanted the team of they dreams already be created for them, so that it works from Day 1. This is, what ProvisionGenie does. ProvisionGenie is now that consultant and provides users with a blended experience of learning about modern collaboration and assets that can be used in Teams and reflecting on how they want to work in Teams. Benefits: allows better understanding of how Teams works in general Tailor-fitted teams have higher adoption rates Mitigates Teams sprawl by preventing abandoned Teams Prevents \"stockpiled\" channels (and their SharePoint folder equivalents) Enables better adoption of the correct usage of SharePoint lists & libraries For more information head over to Canvas App Overview","title":"End User value of ProvisionGenie"},{"location":"adminfactsheet/#cost-to-run-provisiongenie","text":"ProvisionGenie itself is free, but you will need an Azure subscription to run the Logic Apps. Logic Apps are part of the free tier for up to 4000 actions. a Microsoft 365 license for every person who uses the app a Power Apps per app or Power Apps per user plan for every person who uses ProvisionGenie For more detail, head over to Cost estimation .","title":"Cost to run ProvisionGenie"},{"location":"adminfactsheet/#security","text":"We take security very serious and want you to make the informed decision, that ProvisionGenie is a good fit for your organization: You can't unintentionally overexpose data only by allowing Power Apps in your organization, as Power Apps does not provide users with access to any data assets that they don't already have access to Power Platform leverages Azure Active Directory to control user authentication & access to data In the Dataverse environment, access is controlled at three levels: Environment roles Resource permissions for Power Apps Dataverse security roles - Part of our solution is a special security role, so that that no one can bypass the canvas app. This way, data can't be over exposed. Conditional Access Policy via Azure AD Premium can be applied for Power Apps as well All Logic Apps handle authentication to Graph API with a Managed Identity, which means that there are no credentials, which could get exposed/leaked or need to be maintained.","title":"Security"},{"location":"adminfactsheet/#privacy","text":"We do not collect any data about you or your users. We built ProvisionGenie for Microsoft Teams and all data stays in your tenant. More helpful resources: trust.microsoft.com Microsoft Privacy statement In detail report on Dynamics 365 and Power Platform:Availability, data location, language, and localization - PDF download Detailed information on geographical availability - Power BI report","title":"Privacy"},{"location":"adminfactsheet/#governance","text":"We designed and built ProvisionGenie to be an enterprise-grade solution. ProvisionGenie can be monitored like every other Power platform solution within the Center of Excellence Starter Kit , which we highly recommend to use. Additionally, you can monitor the Logic Apps in the Azure portal .","title":"Governance"},{"location":"adminfactsheet/#deploy-and-maintain-provisiongenie","text":"To get a better understanding of the architecture of ProvisionGenie we recommend to familiarize yourself first with our Solution overview and make sure you understand our Architecture Decisions Additionally we provide you with a pictured step by step Deployment Guide that walks you through the entire deployment process. If something doesn't work you can always raise an issue and we will help.","title":"Deploy and maintain ProvisionGenie"},{"location":"adminfactsheet/#update-schedule","text":"This is an open-source project and we welcome contributions . We will use semantic versioning : We will merge PRs about fixing defects or optimizing existing code fortnightly and release a patch which you can then use New features without breaking changes will be released in minor versions breaking changes will be released only in major versions You can familiarize yourself with our Roadmap to know what's coming when.","title":"Update schedule"},{"location":"adminfactsheet/#any-other-questions","text":"Please let us know, we love to help! \ud83e\uddde","title":"Any other questions?"},{"location":"architecturedecisions/","text":"Architecture Decisions \u00b6 Database \u00b6 As the Canvas App doesn't have its own database, we wanted to make a decision on where to log all requests to provision a Team. We could have handled the provisioning process without keeping the data, but in order for reasons of traceability future-readiness we wanted to store the data somewhere. Decision - Microsoft Dataverse \u00b6 ProvisionGenie uses Microsoft Dataverse to store all data about the (to be) provisioned teams in 5 different tables (for more information on this, see Solution Overview ). Alternatives \u00b6 here are some thoughts on why we chose Dataverse over SharePoint Dataverse for Teams Azure SQL / Azure Table Storage Dataverse vs. SharePoint lists \u00b6 As much as we love SharePoint for content & collaboration within Microsoft 365, it is not an appropriate service to store data like we intend it with ProvisionGenie: Issues with Developer Experience \u00b6 Delegation: In Canvas Apps, heavy processing of data is delegated to the data connection. Common formulas in Power Apps are not delegatable to SharePoint: This means that it's difficult to return more than 500 (default) to 2000 (max) records at a time in SharePoint. Although this is not our core use case in ProvisionGenie, we want the entire solution to be future-proof Filter for data from SharePoint lists have some hard to overcome limits, like yes/no fields are not filterable All SharePoint lists are independent from each other. And although lists can have lookup columns that could refer to other lists, a SharePoint list is by no means a relational database. Lookup columns are not only causing a challenging developer experience but also lead to massive performance issues Performance issues \u00b6 The (non-premium) SharePoint connector pipelines to SharePoint lists and we experience the following issues: A SharePoint list that contains many columns leads to slowness Too many dynamic lookup columns: especially lookup, person or calculated columns eat performance Huge lists cause extra overhead Rule of thumbs: The more items, columns and lookup columns your lists needs to contain, the more likely your user experience will be poor Security issues \u00b6 A Power Apps Canvas app that writes data into a SharePoint list comes with some extra security issues. Our main concern is, that every user who wants to use the app needs to have permissions for this list. This means, that they could manipulate data in the list bypassing the app. Of course you could try to hide the list on the respecting SharePoint site, but that would just be obscurity, not security. Dataverse vs. Dataverse for Teams \u00b6 We also took Dataverse's little sister, Dataverse for Teams into consideration but needed to it turn down, because we don't want security roles, lifecycle and governance of our solution (and its environment) to be tied to a team in which every user needs to be a member of to use ProvisionGenie. Azure SQL / Azure Table Storage \u00b6 Trying to circumvent the premium license for Dataverse by choosing Azure SQL or Azure Table Storage as suggested in issue #52 won't work as well. Data needs to be written from the canvas app into the storage, and this requires for both Azure SQL and Azure Table Storage either a premium connector or a (premium) custom connector. This means that no matter which enterprise-grade storage we use, we need the premium license. Consequences of choosing Dataverse \u00b6 Using Dataverse results in licensing costs, as every user will need an Power Apps per app or a PowerApps per user plan. We are aware that this might come across as hurdle and that the desire to somehow bypass is hugh. But enterprise-grade solutions don't come for free. Integration \u00b6 As we wanted to automate the provisioning process of a requested custom team, we needed to look for a service with which we could do that. Decision - Azure Logic Apps \u00b6 In our first proof of concept, we still used Power Automate to provision a custom Teams team, but Power Automate is intended to be used to improve personal productivity and to serve non mission-critical scenarios. The more a solution scales, the less likely it is a good fit for Power Automate: Power Automate flows run in the context of a user, while Azure Logic Apps flow run in the context of an application Power Automate has only limited options for monitoring our developer experience in Azure Logic Apps was better, as we could easily manipulate the code and have a visual experience side-by-side Power Automate would have required a Premium license as we need HTTP actions Consequences of choosing Azure Logic Apps \u00b6 requires an Azure subscription invoicing happens consumption-based No Microsoft Planner provisioning \u00b6 We use Microsoft Graph API to provision all assets that were requested by users using the Power Apps Canvas app with Azure Logic Apps. Using Microsoft Planner for day-to-day task management within a team is considered to be a best practice. Unfortunately, the Planner API lacks of having application level permissions. Decision \u00b6 Therefore, we decided to not provision it, as it would cause a lot of disadvantages like need of a service account which couldn't be MFA-enabled Consequences of not provisioning Planner \u00b6 We want to give ProvisionGenie users the best experience to work in Teams as from day 1. If they don't get a planner plan by our process, we needed to present them an alternative. This is why we chose to ask our users if they wanted to have a SharePoint list with columns that mimic Planner behavior provisioned for them. We introduce users as well to gallery view in lists so that they get a similar experience as in Planner. As we can create SharePoint lists and their columns with application permissions, this is as a secure alternative. Teams Wiki \u00b6 Usually, a new Team also contains a Teams Wiki tab. The Wiki is a (hidden) SharePoint library called Teams Wiki Data in the team site that backs the Team. You can find it here: https://<your-tenant-here>.sharepoint.com/sites/<your-team-site-here>/Teams%20Wiki%20Data . When a user removes Wiki tab from a channel, all content in that hidden library gets hard-deleted without any chance to be restored. There are even more reasons to not like the Wiki: Wiki is not searchable Wiki doesn't allow co-authoring Wiki can't be moved Decision to delete the Wikis \u00b6 As part of our provisioning process, we delete the Teams Wiki from all created channels. We believe, that the Wiki is not a good place to store any kind of knowledge in. Of course our decision to delete the Wikis from all initial channels does not prevent users from adding a Wiki tab to an existing or manually created channel, but at least it is not the default behavior in a new Team. In the future, we want to automatically add a OneNote notebook.","title":"Architecture decisions"},{"location":"architecturedecisions/#architecture-decisions","text":"","title":"Architecture Decisions"},{"location":"architecturedecisions/#database","text":"As the Canvas App doesn't have its own database, we wanted to make a decision on where to log all requests to provision a Team. We could have handled the provisioning process without keeping the data, but in order for reasons of traceability future-readiness we wanted to store the data somewhere.","title":"Database"},{"location":"architecturedecisions/#decision-microsoft-dataverse","text":"ProvisionGenie uses Microsoft Dataverse to store all data about the (to be) provisioned teams in 5 different tables (for more information on this, see Solution Overview ).","title":"Decision - Microsoft Dataverse"},{"location":"architecturedecisions/#alternatives","text":"here are some thoughts on why we chose Dataverse over SharePoint Dataverse for Teams Azure SQL / Azure Table Storage","title":"Alternatives"},{"location":"architecturedecisions/#dataverse-vs-sharepoint-lists","text":"As much as we love SharePoint for content & collaboration within Microsoft 365, it is not an appropriate service to store data like we intend it with ProvisionGenie:","title":"Dataverse vs. SharePoint lists"},{"location":"architecturedecisions/#issues-with-developer-experience","text":"Delegation: In Canvas Apps, heavy processing of data is delegated to the data connection. Common formulas in Power Apps are not delegatable to SharePoint: This means that it's difficult to return more than 500 (default) to 2000 (max) records at a time in SharePoint. Although this is not our core use case in ProvisionGenie, we want the entire solution to be future-proof Filter for data from SharePoint lists have some hard to overcome limits, like yes/no fields are not filterable All SharePoint lists are independent from each other. And although lists can have lookup columns that could refer to other lists, a SharePoint list is by no means a relational database. Lookup columns are not only causing a challenging developer experience but also lead to massive performance issues","title":"Issues with Developer Experience"},{"location":"architecturedecisions/#performance-issues","text":"The (non-premium) SharePoint connector pipelines to SharePoint lists and we experience the following issues: A SharePoint list that contains many columns leads to slowness Too many dynamic lookup columns: especially lookup, person or calculated columns eat performance Huge lists cause extra overhead Rule of thumbs: The more items, columns and lookup columns your lists needs to contain, the more likely your user experience will be poor","title":"Performance issues"},{"location":"architecturedecisions/#security-issues","text":"A Power Apps Canvas app that writes data into a SharePoint list comes with some extra security issues. Our main concern is, that every user who wants to use the app needs to have permissions for this list. This means, that they could manipulate data in the list bypassing the app. Of course you could try to hide the list on the respecting SharePoint site, but that would just be obscurity, not security.","title":"Security issues"},{"location":"architecturedecisions/#dataverse-vs-dataverse-for-teams","text":"We also took Dataverse's little sister, Dataverse for Teams into consideration but needed to it turn down, because we don't want security roles, lifecycle and governance of our solution (and its environment) to be tied to a team in which every user needs to be a member of to use ProvisionGenie.","title":"Dataverse vs. Dataverse for Teams"},{"location":"architecturedecisions/#azure-sql-azure-table-storage","text":"Trying to circumvent the premium license for Dataverse by choosing Azure SQL or Azure Table Storage as suggested in issue #52 won't work as well. Data needs to be written from the canvas app into the storage, and this requires for both Azure SQL and Azure Table Storage either a premium connector or a (premium) custom connector. This means that no matter which enterprise-grade storage we use, we need the premium license.","title":"Azure SQL / Azure Table Storage"},{"location":"architecturedecisions/#consequences-of-choosing-dataverse","text":"Using Dataverse results in licensing costs, as every user will need an Power Apps per app or a PowerApps per user plan. We are aware that this might come across as hurdle and that the desire to somehow bypass is hugh. But enterprise-grade solutions don't come for free.","title":"Consequences of choosing Dataverse"},{"location":"architecturedecisions/#integration","text":"As we wanted to automate the provisioning process of a requested custom team, we needed to look for a service with which we could do that.","title":"Integration"},{"location":"architecturedecisions/#decision-azure-logic-apps","text":"In our first proof of concept, we still used Power Automate to provision a custom Teams team, but Power Automate is intended to be used to improve personal productivity and to serve non mission-critical scenarios. The more a solution scales, the less likely it is a good fit for Power Automate: Power Automate flows run in the context of a user, while Azure Logic Apps flow run in the context of an application Power Automate has only limited options for monitoring our developer experience in Azure Logic Apps was better, as we could easily manipulate the code and have a visual experience side-by-side Power Automate would have required a Premium license as we need HTTP actions","title":"Decision - Azure Logic Apps"},{"location":"architecturedecisions/#consequences-of-choosing-azure-logic-apps","text":"requires an Azure subscription invoicing happens consumption-based","title":"Consequences of choosing Azure Logic Apps"},{"location":"architecturedecisions/#no-microsoft-planner-provisioning","text":"We use Microsoft Graph API to provision all assets that were requested by users using the Power Apps Canvas app with Azure Logic Apps. Using Microsoft Planner for day-to-day task management within a team is considered to be a best practice. Unfortunately, the Planner API lacks of having application level permissions.","title":"No Microsoft Planner provisioning"},{"location":"architecturedecisions/#decision","text":"Therefore, we decided to not provision it, as it would cause a lot of disadvantages like need of a service account which couldn't be MFA-enabled","title":"Decision"},{"location":"architecturedecisions/#consequences-of-not-provisioning-planner","text":"We want to give ProvisionGenie users the best experience to work in Teams as from day 1. If they don't get a planner plan by our process, we needed to present them an alternative. This is why we chose to ask our users if they wanted to have a SharePoint list with columns that mimic Planner behavior provisioned for them. We introduce users as well to gallery view in lists so that they get a similar experience as in Planner. As we can create SharePoint lists and their columns with application permissions, this is as a secure alternative.","title":"Consequences of not provisioning Planner"},{"location":"architecturedecisions/#teams-wiki","text":"Usually, a new Team also contains a Teams Wiki tab. The Wiki is a (hidden) SharePoint library called Teams Wiki Data in the team site that backs the Team. You can find it here: https://<your-tenant-here>.sharepoint.com/sites/<your-team-site-here>/Teams%20Wiki%20Data . When a user removes Wiki tab from a channel, all content in that hidden library gets hard-deleted without any chance to be restored. There are even more reasons to not like the Wiki: Wiki is not searchable Wiki doesn't allow co-authoring Wiki can't be moved","title":"Teams Wiki"},{"location":"architecturedecisions/#decision-to-delete-the-wikis","text":"As part of our provisioning process, we delete the Teams Wiki from all created channels. We believe, that the Wiki is not a good place to store any kind of knowledge in. Of course our decision to delete the Wikis from all initial channels does not prevent users from adding a Wiki tab to an existing or manually created channel, but at least it is not the default behavior in a new Team. In the future, we want to automatically add a OneNote notebook.","title":"Decision to delete the Wikis"},{"location":"costestimation/","text":"Cost Estimation \u00b6 We provide ProvisionGenie free of charge, but that doesn't mean, that you don't need to pay licensing fees to Microsoft. Azure \u00b6 You will need an Azure subscription to run the Azure Logic Apps: While testing, we ended with less than 0.01$ per run and in the meanwhile, Azure Logic Apps became part of the free Azure tier . This means that you won't need to pay for ot AT ALL. More information can be found here, where you can also sign up for a free Azure subscription . You can also use the Azure Pricing calculator Power Apps \u00b6 To use this solution, every person using this solution will need: a Microsoft 365 license (for example Microsoft 365 E3, Microsoft 365 E5, Microsoft 365 Business Basic, Microsoft 365 Business Standard, Microsoft 365 Business Premium) a Power Apps per app plan OR Power Apps per user plan Effectively October 1, 2021, both plans are now priced at 50% of the previous rate. More information can be found in Microsoft's announcement If you already have a Power Apps per user plan for all users who shall use this app, you are already set. If you already have a Power Apps per app plan (purchased before October 2021), you will need to look if you already exceeded the limit of two apps. If yes, we advise to consider upgrading to a Power Apps per user plan as of October 2021, as this unlocks not only this app but unlimited apps. We make use of Dataverse, which is the only reason why a Power Apps license is required. Please read our Architecture Decisions to understand why working around the licensing fee for Power Apps by using for example SharePont or Dataverse for Teams is not a good idea.","title":"Cost estimation"},{"location":"costestimation/#cost-estimation","text":"We provide ProvisionGenie free of charge, but that doesn't mean, that you don't need to pay licensing fees to Microsoft.","title":"Cost Estimation"},{"location":"costestimation/#azure","text":"You will need an Azure subscription to run the Azure Logic Apps: While testing, we ended with less than 0.01$ per run and in the meanwhile, Azure Logic Apps became part of the free Azure tier . This means that you won't need to pay for ot AT ALL. More information can be found here, where you can also sign up for a free Azure subscription . You can also use the Azure Pricing calculator","title":"Azure"},{"location":"costestimation/#power-apps","text":"To use this solution, every person using this solution will need: a Microsoft 365 license (for example Microsoft 365 E3, Microsoft 365 E5, Microsoft 365 Business Basic, Microsoft 365 Business Standard, Microsoft 365 Business Premium) a Power Apps per app plan OR Power Apps per user plan Effectively October 1, 2021, both plans are now priced at 50% of the previous rate. More information can be found in Microsoft's announcement If you already have a Power Apps per user plan for all users who shall use this app, you are already set. If you already have a Power Apps per app plan (purchased before October 2021), you will need to look if you already exceeded the limit of two apps. If yes, we advise to consider upgrading to a Power Apps per user plan as of October 2021, as this unlocks not only this app but unlimited apps. We make use of Dataverse, which is the only reason why a Power Apps license is required. Please read our Architecture Decisions to understand why working around the licensing fee for Power Apps by using for example SharePont or Dataverse for Teams is not a good idea.","title":"Power Apps"},{"location":"about/developers/","text":"Developers \u00b6 ProvisionGenie is a project by Luise Freese and Carmen Ysewijn . As this is an open-source initiative, we get some help by awesome friends: Emotional support and debugging by Yannick Reekmans , ProvisionGenie Logo designed by Michael Roth Best music and support by Lee Ford","title":"Developers"},{"location":"about/developers/#developers","text":"ProvisionGenie is a project by Luise Freese and Carmen Ysewijn . As this is an open-source initiative, we get some help by awesome friends: Emotional support and debugging by Yannick Reekmans , ProvisionGenie Logo designed by Michael Roth Best music and support by Lee Ford","title":"Developers"},{"location":"about/releasenotes/","text":"Release notes \u00b6 v1.0.0 \u00b6 Minimum l\ud83d\udc96vable product release of ProvisionGenie \ud83e\uddde. Contains: a Power Apps canvas app 5 Azure Logic Apps 5 Dataverse tables 2 security roles Features: lets users create a custom Microsoft Teams team including channels a library a list a tasklist and a welcome package","title":"Release Notes"},{"location":"about/releasenotes/#release-notes","text":"","title":"Release notes"},{"location":"about/releasenotes/#v100","text":"Minimum l\ud83d\udc96vable product release of ProvisionGenie \ud83e\uddde. Contains: a Power Apps canvas app 5 Azure Logic Apps 5 Dataverse tables 2 security roles Features: lets users create a custom Microsoft Teams team including channels a library a list a tasklist and a welcome package","title":"v1.0.0"},{"location":"about/roadmap/","text":"Roadmap \u00b6 In addition to our issues list we want you to know what's new and what's coming. To have a look into the future, this is the place to be. To know what we did in the past, head over to our Release notes . Next up \u00b6 We are right now working on the feature: add members to a Team","title":"Roadmap"},{"location":"about/roadmap/#roadmap","text":"In addition to our issues list we want you to know what's new and what's coming. To have a look into the future, this is the place to be. To know what we did in the past, head over to our Release notes .","title":"Roadmap"},{"location":"about/roadmap/#next-up","text":"We are right now working on the feature: add members to a Team","title":"Next up"},{"location":"about/sessions/","text":"Sessions \u00b6 We talk and demo ProvisionGenie here: upcoming Microsoft 365 Development Community call -join live in Teams on Nov 11, 2021, 7am PDT/4pm CEST Microsoft Power Apps community call - join live in Teams on Nov 17, 2021, 8am PDT/5pm CEST past PnP Weekly 138 - recorded on Oct 11, 2021 Microsoft 365 Developer podcast - recorded on Oct 6, 2021 Alex & Ragnar - watch it on YouTube","title":"Sessions"},{"location":"about/sessions/#sessions","text":"We talk and demo ProvisionGenie here: upcoming Microsoft 365 Development Community call -join live in Teams on Nov 11, 2021, 7am PDT/4pm CEST Microsoft Power Apps community call - join live in Teams on Nov 17, 2021, 8am PDT/5pm CEST past PnP Weekly 138 - recorded on Oct 11, 2021 Microsoft 365 Developer podcast - recorded on Oct 6, 2021 Alex & Ragnar - watch it on YouTube","title":"Sessions"},{"location":"corecomponents/canvasapp/","text":"Power Apps Canvas App \u00b6 Purpose of ProvisionGenie is to foster teamwork by letting owners-to-be of Microsoft Teams teams make smarter decisions on how a team can work in Teams. Usually, a business consultant would talk a team through assets that are available in Teams and Microsoft 365 and answer all question with 'it depends'. They would explain that people usually confuse chat with task assignment \"could you please\" confuse email with status reports \"per my last email\" confuse SharePoint with a dumpster for any file in the world \"can you migrate this pile of mess to someone else's computer?\" and show them what channels are made for, how a team can work with metadata on files and how staying on track works with Microsoft Lists. The Business consultant would ask them if they wanted more learning material pinned to their brand new team and if they wanted the team of they dreams already be created for them, so that it works from Day 1. This is, what ProvisionGenie does: High level overview on what the Canvas App does \u00b6 Short upskilling nuggets in Pop Ups so that owner can make informed decisions on channels, metadata and tools to use Questionnaire to get information on Teams Name, Teams Description and logged in user to provision the Team itself Channels Name of SharePoint list & columns Name of SharePoint library & columns if Owner additionally wants a SharePoint list for task management (see also why we don't provision Planner in ProvisionGenie in our Architecture Decisions ) or a \"Welcome package\" Patch 5 Dataverse tables with the information we got by user As a result of the provisioning process, we have 1 Teams team (with a corresponding SharePoint team site that includes the default document library but without the Teams Wiki . as many channels as requested 1 additional library with as many as requested columns of type single line of text multiple lines of text number date date and time person choice (with as many choices as requested) 1 SharePoint list with as many as requested columns of type single line of text multiple lines of text number date date and time person choice (with as many choices as requested) optional: Welcome package contains a link to additional learning resources pinned to channel General - URL can be defined during deployment process optional: additional SharePoint list for task management containing columns Title (single line of text) Description (multiple lines of text) start date (date) due date (date) assigned person (person) priority (choice [urgent, high, medium, low]) For more context on how this canvas app fits into our solution, please head over to Solution Overview and Architecture Decisions How do I get the app? \u00b6 To get the entire solution as-is, head over to our Deployment Guide To contribute to it, please see our Contribution Guide If you like to reverse-engineer it, please see our How to build the canvas app guide as a start. You can also download the .zip file from here and import the solution into your environment - please note that this won't give you the full experience, as the entire process of provisioning does not run in this canvas app but in Azure Logic Apps flows which get triggered by new rows in different tables in Dataverse. What if something doesn't work? \u00b6 Please report bugs as issues , so we can work on them! You are also invited to contribute to the app - let's make ProvisionGenie together even better!","title":"Overview"},{"location":"corecomponents/canvasapp/#power-apps-canvas-app","text":"Purpose of ProvisionGenie is to foster teamwork by letting owners-to-be of Microsoft Teams teams make smarter decisions on how a team can work in Teams. Usually, a business consultant would talk a team through assets that are available in Teams and Microsoft 365 and answer all question with 'it depends'. They would explain that people usually confuse chat with task assignment \"could you please\" confuse email with status reports \"per my last email\" confuse SharePoint with a dumpster for any file in the world \"can you migrate this pile of mess to someone else's computer?\" and show them what channels are made for, how a team can work with metadata on files and how staying on track works with Microsoft Lists. The Business consultant would ask them if they wanted more learning material pinned to their brand new team and if they wanted the team of they dreams already be created for them, so that it works from Day 1. This is, what ProvisionGenie does:","title":"Power Apps Canvas App"},{"location":"corecomponents/canvasapp/#high-level-overview-on-what-the-canvas-app-does","text":"Short upskilling nuggets in Pop Ups so that owner can make informed decisions on channels, metadata and tools to use Questionnaire to get information on Teams Name, Teams Description and logged in user to provision the Team itself Channels Name of SharePoint list & columns Name of SharePoint library & columns if Owner additionally wants a SharePoint list for task management (see also why we don't provision Planner in ProvisionGenie in our Architecture Decisions ) or a \"Welcome package\" Patch 5 Dataverse tables with the information we got by user As a result of the provisioning process, we have 1 Teams team (with a corresponding SharePoint team site that includes the default document library but without the Teams Wiki . as many channels as requested 1 additional library with as many as requested columns of type single line of text multiple lines of text number date date and time person choice (with as many choices as requested) 1 SharePoint list with as many as requested columns of type single line of text multiple lines of text number date date and time person choice (with as many choices as requested) optional: Welcome package contains a link to additional learning resources pinned to channel General - URL can be defined during deployment process optional: additional SharePoint list for task management containing columns Title (single line of text) Description (multiple lines of text) start date (date) due date (date) assigned person (person) priority (choice [urgent, high, medium, low]) For more context on how this canvas app fits into our solution, please head over to Solution Overview and Architecture Decisions","title":"High level overview on what the Canvas App does"},{"location":"corecomponents/canvasapp/#how-do-i-get-the-app","text":"To get the entire solution as-is, head over to our Deployment Guide To contribute to it, please see our Contribution Guide If you like to reverse-engineer it, please see our How to build the canvas app guide as a start. You can also download the .zip file from here and import the solution into your environment - please note that this won't give you the full experience, as the entire process of provisioning does not run in this canvas app but in Azure Logic Apps flows which get triggered by new rows in different tables in Dataverse.","title":"How do I get the app?"},{"location":"corecomponents/canvasapp/#what-if-something-doesnt-work","text":"Please report bugs as issues , so we can work on them! You are also invited to contribute to the app - let's make ProvisionGenie together even better!","title":"What if something doesn't work?"},{"location":"corecomponents/dataverse/","text":"Dataverse \u00b6 We chose Dataverse as our storage for all requests and created five tables: We log all requests in the TeamsRequest table, these are the most important columns: TeamName TeamDescription TeamOwner includeTaskList includeWelcomePackage Each Team can have multiple channels, which we log in the TeamsChannel table, these are the most important columns: Channelname ChannelDescription Teamsrequest (to link to the correct Team) Each Team can also have a list and a library, we log them in the SharePointLibrary and SharePointLIst tables, these are the most important columns: LibraryName / ListName Teamsrequest (to link to the correct Team) Each List/Library can contain columns, we log them in the ListColumns table, these are the most important columns: ColumnName ColumnType ColumnValues (for ColumnType Choice )","title":"Overview"},{"location":"corecomponents/dataverse/#dataverse","text":"We chose Dataverse as our storage for all requests and created five tables: We log all requests in the TeamsRequest table, these are the most important columns: TeamName TeamDescription TeamOwner includeTaskList includeWelcomePackage Each Team can have multiple channels, which we log in the TeamsChannel table, these are the most important columns: Channelname ChannelDescription Teamsrequest (to link to the correct Team) Each Team can also have a list and a library, we log them in the SharePointLibrary and SharePointLIst tables, these are the most important columns: LibraryName / ListName Teamsrequest (to link to the correct Team) Each List/Library can contain columns, we log them in the ListColumns table, these are the most important columns: ColumnName ColumnType ColumnValues (for ColumnType Choice )","title":"Dataverse"},{"location":"corecomponents/howtobuildthecanvasapp/","text":"How to build the canvas app \u00b6 Although we give you the zipped files of the canvas app in our solution, you can also follow these instructions if you want to rebuild it. It will also make it easier to understand how everything works if you want to contribute to ProvisionGenie. Basic UI concepts \u00b6 This app is designed to be a personal app in Microsoft Teams and we aimed to adopt the Teams look & feel by following the guidance available in the Microsoft Teams UI Toolkit . This means, that we will not explain all basic UI components in this document but refer to the Toolkit. Colors \u00b6 Set variables onStart for the colors you use the most- for example: Set(color_blurple,ColorValue(\"#6264A7\")) and Set(color_bg,ColorValue(\"#F5F5F5\")) This way, you can refer to these values - or change them, if needed, more easily. Navigation \u00b6 Create a _selectedScreen variable as a record containing row (number) title (text) image (image) and create a NavigationMenu collection in onStart , wrap both in Concurrent() : Concurrent( Set( _selectedScreen, { Row: 1, Title: \"Welcome\", Image: ic_fluent_home_48_regular } ), ClearCollect( NavigationMenu, { Row: 1, Title: \"Welcome\", Image: ic_fluent_home_48_regular }, { Row: 2, Title: \"Teams\", Image: ic_fluent_people_32_regular }, { Row: 3, Title: \"Channels\", Image: ic_fluent_text_bullet_list_square_24_regular }, { Row: 4, Title: \"Libraries\", Image: ic_fluent_document_48_regular }, { Row: 5, Title: \"Lists\", Image: ic_fluent_clipboard_bullet_list_ltr_20_regular }, { Row: 6, Title: \"Checkout\", Image: ic_fluent_checkbox_checked_24_regular } ) (To make this work replace the name of the images with the images you uploaded \ud83d\udca1 Create a gallery with Rectangle Text label Image Set Items of the gallery to NavigationMenu Set TemplateFill to If(ThisItem.Row = _selectedScreen.Row, RGBA(220, 220, 220, 1), RGBA(0,0,0,0)) Set OnSelect to Set( _selectedScreen, ThisItem ); If( ThisItem.Row = 1, Navigate( 'Welcome Screen', None ), ThisItem.Row = 2, Navigate( 'Teams Screen', None ), ThisItem.Row = 3, Navigate( 'Channel Screen', None ), ThisItem.Row = 4, Navigate( 'Libraries Screen', None ), ThisItem.Row = 5, Navigate( 'Lists Screen', None ), ThisItem.Row = 6, Navigate( 'Checkout Screen', None ) ) Set Visible of the rectangle to ThisItem.Row = _selectedScreen.Row Set Text of the TextLabel to ThisItem.Title Set Image of the Image to ThisItem.Image Keep in mind to always Set(_selectedScreen,{Title: \"your screenname\", Row: <rownumber>}) in addition to Navigate(your screenname) if you want to let the user navigate to another screen not using the navigation gallery. SidePanel \u00b6 The SidePanel consists of 2 tabs, Details and Resources and we use 2 Textlabels for the tab names 2 Rectangles as an underline for the tab names at least 2 HTMLText controls to display content depending on the tab This is how it works: Set HTMLText of HTML text control to <div style='margin: 0 0 0 20px; font-size: 11pt !important; font-weight: lighter; color: #252525; padding: 0 10px; width: 100%; overflow: hidden;'> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 1 <br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 2<br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 3<br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 4<br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 5<br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 6<br> </div> Repeat with different text in the second HTML text control Set OnSelect of the Details Textlabel to UpdateContext({IsShowResourcesTab: false}) Set OnSelect of the Resources Textlabel to UpdateContext({IsShowResourcesTab:true}) Set Visible of the Resources HTMLText to IsShowResourcesTab Set Visible of the Resources Rectangle to IsShowResourcesTab Set Visible of the Details HTMLText to !IsShowResourcesTab Set Visible of the Details Rectangle to !IsShowResourcesTab Set FontWeight of Details textlabel to If(!IsShowResourcesTab,FontWeight.Bold, FontWeight.Lighter) Set FontWeight of Resources textlabel to If(IsShowResourcesTab,FontWeight.Bold, FontWeight.Lighter) This way, the content of Resources gets visible once the Details content is non-visible and vice versa. Also, user switches between the content by selecting the respecting text labels. Font-weight will switch from lighter to bold and Rectangle (that serves as an underline) will be visible once user selects a Textlabel PopUp \u00b6 In the app, we make use of various PopUps, either to educate users about how to work in Microsoft Teams, or to explain something that users can request (like 'Welcome Package') or to indicate a success. Most PopUps contain 3 different pages, which means that we need 3 times different content for them as well Popups contain the following controls: Textlabel that serves as a Title for this PopUp TextLabel that serves as the main content for this PopUp Rectangle that serves as a Dimmer Button that serves as background for the PopUp Circles that serves as Stepper Dots so users can select them to navigate back and forth of the pages Cancel icon to close the PopUp HTMLtext to create a shadow around the PopUp 2 Buttons for next/back Image Rectangle to prettify the PopUp Rectangle as Dimmer \u00b6 Purpose here is do create a lightbox effect and to dim everything but the PopUp itself. Following the Teams UI Toolkit: Set Fill to RGBA(37, 36, 35, 0.75) Set size to the entire screen Button that serves as background \u00b6 As Rectangles in Power Apps don't support rounded corners (Border radius) we will use a Button instead. Set Width to 600 Set Height to 480 Set Color to White Set Hover color to White Set Pressed color to White Set Border radius to 3 Circles that serves as Stepper Dots \u00b6 Create 3 circles Set their Width to 8 Set their Height to 8 Align them horizontally Set OnSelect of Circle1 to UpdateContext({isPage:1}) Set OnSelect of Circle2 to UpdateContext({isPage:2}) Set OnSelect of Circle3 to UpdateContext({isPage:3}) Set Fill of Circle1 to If(isPage=1,color_blurple,color_bg) Set Fill of Circle2 to If(isPage=2,color_blurple,color_bg) Set Fill of Circle3 to If(isPage=3,color_blurple,color_bg) This way, the circle is color_blurple on the correct page. Cancel icon to close the PopUp \u00b6 Place your Cancel icon at the upper right hand corner of the button Set OnSelect to UpdateContext({isShowPopUp: false}) HTMLtext to create a shadow around the PopUp \u00b6 To have a nice shadow around the PopUp Create an HTMLtext control Set its HTMLtext to \"<div style='margin:10px;width:600px;height:480px;background-color:#;box-shadow:0 3px 6px 1px #252525; border-radius:3px'></div>\" Rearrange controls so that the shadow is underneath the button Next button \u00b6 Create a button Set colors as stated in Teams UI Toolkit if you like this to be design consistent to Teams, otherwise choose your own colors (preferably set them as variables) Set OnSelect to If( isPage= 1, UpdateContext({isPage: 2}), If( isPageTrack = 2, UpdateContext({isPage: 3}), UpdateContext({isShowPopUp: false}) ) ) This way, users navigate to the next screen if they are on page 1 or 2 and close the PoPup if they are on page 3. Set Text to If(isPage=1,\"yourtext-->2\",If(isPage=2,\"yourtext-->3\",\"Close\")) This way, we display different texts depending on the page our user is currently at Set Width to If(isPage=1,<value1>,If(isPage=2, <value2>,<value3>) This way, the width of the button adjusts Set X to If(isPage=1,<value1>,If(isPage=2, <value2>,<value3>) to adjust horizontal position of the button. To calculate this correctly, place the button by drag'n'drop where you want it. Now check the x-value, add the width to it. This is your target value. For the other pages, you will need to deduct the width of the button from that target value so you get the x-value of the button on that page. If you have more than 1 PopUp, it's worth to think about parameterizing this as well Back button \u00b6 Create a button Set colors as stated in Teams UI Toolkit if you like this to be design consistent to Teams, otherwise choose your own colors (preferably set them as variables) Set OnSelect to If( isPage = 1, UpdateContext({isPage: 3}), If( isPage = 3, UpdateContext({isPageConversations: 2}), UpdateContext({isPageConversations:1}) ) ) This way, users navigate to the previous screen. Image \u00b6 Insert an image Set Width to 600 Set Height to 240 Set Image to If(isPage=1,<image1>,If(isPage=2,<image2>,<image3>)) You will notice, that due to the Border radius of the background button, the edges of the image don't look like 90\u00b0 corners. This is why we will insert a rectangle to cover this Rectangle \u00b6 Create a Rectangle Set its Fill to `White** Set Width to 600 Set Height to 17 Place it so it overlaps with the rounded corners Label for the Title \u00b6 Each page should have a title. Create a Textlabel Set its Text to If(isPage=1,<yourTitle1>,If(isPage=2,<yourTitle2>,<yourTitle3>)) Label for the main content \u00b6 Create a Textlabel Set its Text to If(isPage=1,<yourContent1>,If(isPage=2,<yourContent2>,<yourContent>)) To display this PopUp you will need to do the following steps: group the controls Set Visible of the group to isShowPopUp trigger this PopUp - this could be another button, which OnSelect needs to be set to UpdateContext({isShowPopUp: true}) Screens \u00b6 Navigation and side panel will be shown on every screen, only the HTMLtext in the SidePanel changes to contextually display details (how to use this screen) and resources (learning content about Teams). In addition to that, we need the following controls: Welcome Screen \u00b6 We built 1 Welcome PopUps that is triggered by AppStart and introduces users on three pages what this app is about 4 different PopUps for the learning content 4 respecting Cards that serve as a more beautiful trigger for these PopUps 1 Button to navigate to the Teams screen and start the provisioning process Set OnSelect of this Button to Navigate( 'Teams Screen', ScreenTransition.Cover ); Set( _selectedScreen, { Title: \"Teams\", Row: 2 } ) Teams Screen \u00b6 Purpose if this screen is to get information about name description whether our owner (= signed-in user) wants a 'WelcomePackage' or not whether our owner wants a SharePoint list provisioned for task management We get the information by a form which is connected to a DataVerse table Teams Requests - see also Solution Overview A few notes: We modified the styling of the DataCards of the Form to match the criteria of Teams Toolkit. For the yes/no question about the SharePoint list as a task management tool, we build another PopUp to explain this. For info on why we don't provision see Architecture Decisions We changed the default dropdown fields to toggles. To connect those again to your data source, a little extra work is required: Modify the form with toggles instead of dropdown \u00b6 in the form, delete the dropdown control insert into the datacard a toggle set Default of the Card to If(Toggle1.Value,'Do you want the welcome package? (TeamsRequests)'.Yes,'Do you want the welcome package? (TeamsRequests)'.No) Set Update of the toggle to If( ThisItem.'Do you want the welcome package?' = 'Do you want the welcome package? (TeamsRequests)'.Yes, true, ThisItem.'Do you want the welcome package?' = 'Do you want the welcome package? (TeamsRequests)'.No, false ) This way, we match the toggle value with our Dataverse column. The Next button's OnSelect is set to Navigate( 'Channel Screen', ScreenTransition.Cover ); Set( _selectedScreen, { Title: \"Channels\", Row: 3 } ); Set( TeamName, DataCardValue1_1.Text ); Set( TeamsDescription, DataCardValue3_1.Text ); Set( isWelcomePackage, Toggle1.Value ); Set( isSharePointListTasks, Toggle1_1.Value ) Which navigates to the next Channels screen, sets the Navigation correctly and saves the values in variables. Please note, that at this point we won't submit this form to the data source. Channels Screen \u00b6 On this screen, our owner-to-be can create the channels they want to be provisioned in their new Team. We work here with: 1 TextInput to get a value a Button to add this value into a collection a Button to clear the collection a gallery to display the collection Add Button \u00b6 Set its OnSelect to If(txtTagToAdd.Text in colChannels.ChannelName, Notify( \"You already added this Channel. Please try again with a different name.\", NotificationType.Warning ), Collect( colChannels,{ChannelName: txtTagToAdd.Text }); UpdateContext({locClearTextInput: true}); UpdateContext({locClearTextInput: false}) ); This way, we use the Notify function to warn our user in case they add a Channel name that already exists in collection. If the channel name does not exist already in the collection, we add it.Then we update a variable that controls the Reset property of the TextInput, so that its always empty again after we added a channel name to the collection. TextInput \u00b6 Set Reset to locClearTextInput Clear Button \u00b6 In case our user wants to start all over again, we give them a button to do so. Set OnSelect to Clear(colChannels); UpdateContext({locClearTextInput: true}); UpdateContext({locClearTextInput: false}) which empties the collection and updates the variables that controls the Reset property of TexInput again. Gallery \u00b6 Set Items to colChannels Set the Text of Title Textlabel in the gallery to ThisItem.ChannelName Change the default Nextarrow icon to a Cancel icon and set its OnSelect to RemoveIf(colChannels,ChannelName=ThisItem.ChannelName) This way, our user can review the list of channels and even remove some of them again. This neat solution is described in more detail on Carmen Ysewijn's blog The Next button \u00b6 With this button we want to set a variable that concatenates the Channels to a single string with, separated by , , navigate to the next screen and set our navigation correctly. To achieve this, set OnSelect to Set( varChannels, Concat( colChannels, ChannelName & \", \" ) ); Navigate('Libraries Screen',Cover); Set( _selectedScreen, { Title: \"Libraries\", Row: 4 } ) Libraries Screen \u00b6 We want to give users a way to get an additional library - and in this screen we want to get information on library name columns to add column types for the columns to add column values for choice columns Like in the channel screen, we want users to review their inputs again We will need for that Form for the library name Form for Column Names and Column Types TextInput for Column Values of Choice Columns Gallery to display the Column Values for Choice Columns Gallery to display Column Names and Column Types Add Column Button Form for Library Name \u00b6 This Form connects to SharePoint Libraries table in Dataverse, please also see Solution Overview. Form for Column Name and Column Type \u00b6 This Form connects to our List Columns table in Dataverse, please also see Solution Overview. Set Items of the Column Type Dropdown to Choices('Column Type') The TextInput \u00b6 In case user wants to add a choice column, we display another TextInput control, which will then use the same approach as described in the Channels screen: User adds a value and confirms it by selecting an icon and we collect the values into a collection, then we display this collection in a gallery. Create a TexInput Create an icon in that TextInput Set OnSelect of the icon to Collect( ColChoicesLibrary, {Choice: TxtInputLibraryChoices.Text} ); Reset(TxtInputLibraryChoices) Gallery to display the Column Values for Choice Columns \u00b6 Create a gallery Set Items to ColChoicesLibrary Change the default NextArrow icon to a cancel icon Set its OnSelect to RemoveIf(ColChoicesLibrary,Choice=ThisItem.Choice) Set its Visible to isShowGalleryLibrary Set OnVisible of Libraries Screen to UpdateContext({isShowGalleryLibrary: false}); Add columns Button \u00b6 This button shall add the values (column name, column type and column values of choice columns) to a collection. Create a button Set its OnSelect to Collect( colColumnsLibrary, { Name: <DataCardValueWhichHoldsTheName>.Text, Type: <DataCardValueWhichHoldsTheType>.Selected, ColumnValues: Concat( ColChoicesLibrary, Choice & \", \" ) } ); UpdateContext({isShowGalleryLibrary: true}); Clear(ColChoicesLibrary1); ResetForm('Form ColumnName-ColumnType') This means, that we will add the name of the column and the type of the column by getting the values from the respecting DataCards and use Concat() again to make a single string from the column choices values. Also, we show the gallery as we set a variable isShowGalleryLibrary and reset the the ColumnName-ColumnValue form. Set Displaymode of the button to If( IsBlank(<DataCardValueWhichHoldsTheName>) = true || IsBlank(DataCardValueWhichHoldsTheType>.Selected.Value), Disabled, Edit ) This way, our Add button will only be selectable if column name and column value are not empty. Gallery to display Column Names and Column Types \u00b6 Create a gallery Select the Title, Subtitle and Body layout Set Items to colColumnsLibrary Set Text of the Title field to ThisItem.Name - it refers to the name of the column Set Text of the subtitle field to ThisItem.Type.Value - it refers to the selected value of the column type Set Text of the body field to Left(ThisItem.ColumnValues, Len(ThisItem.ColumnValues)-2) - it refers to the column values for choice columns but gets rid of the last , at the end of the string using Left() which returns a string with a certain amount of characters Len() which returns the number of characters of a string -2 because , (comma space) is 2 characters and we want to shorten the string by these to characters Change the by default NextArrow icon to a Cancel icon and set its OnSelect to RemoveIf(colColumnsLibrary1,Name=ThisItem.Name) so that the user can remove this item if they want to. Next Button \u00b6 Our Next or Save library is supposed to do a few things: Set a variable for the library name (remember, we did not submit the form to our data source) Display a PopUp to indicate that the library was saved To achieve this, Create a button Set its OnSelect to Set( IsShowSavedLibraries, true ); Set( varLibraryName, <DataCardValueWhichHoldsLibraryName>.Text ) Lists Screen \u00b6 The Lists screen is following the same approach as the library screen, because we need the very same information about an additional list as for an additional library. Of course we collect the values in different collections, but all controls and the entire logic stays the same. Checkout Screen \u00b6 In the checkout screen, we want to display a PopUp in which the user may review all their responses - and return to a specific screen if they would want to correct something. Create a PopUp, this time with 7 pages - this also means 7 different images, titles, contents and stepper dots Set OnVisible to UpdateContext({isShowSummary: true});UpdateContext({isPageSummary: 1}) Set Visible of the entire PopUpGroup to isShowSummary Set Text of your main content Textlabel to If( isPageSummary = 1, \"please review your request before you submit it\", If( isPageSummary = 2, \"Teamname: \" & TeamName & Char(13) & \"Description: \" & TeamsDescription & Char(13) & \"Owner: \" & User().Email & Char(13) & \"Welcome Package: \" & If( isWelcomePackage = true, \"yes, please!\", \"no thank you\" ) & Char(13) & \"Microsoft List for task management: \" & If( isSharePointListTasks = true, \"yes, please\", \"no thank you\" ) & Char(13), If( isPageSummary = 3, \"We will create the following channels for you: \" & Char(13) & Char(13) & Left( varChannels, Len(varChannels) - 2 ), If( isPageSummary = 4, \"We will create a library called '\" & varLibrary1Name & \"' for you with the following columns: \" & Char(13) & Char(13) & Left( Concat( colColumnsLibrary1, Name & \", \" ), Len( Concat( colColumnsLibrary1, Name & \", \" ) ) - 2 ), If( isPageSummary = 5, \"We will create a list called '\" & varListName & \"' for you with the following columns: \" & Char(13) & Char(13) & Left( Concat( colColumnsList, Name & \", \" ), Len( Concat( colColumnsList, Name & \", \" ) ) - 2 ), If( isPageSummary = 6, \"If everything looks ok, hit SUBMIT! \" & Char(13) & Char(13) & \"If you need to correct something, close this PopUp and navigate to the respecting screen. You can then return to this summary later\", If( isPageSummary = 7, \"you can close the app now - See you next time when you like to create a Team\" ) ) ) ) ) ) ) Set Text of the title Textlabel to If( isPageSummary = 1, \"Let's make your teamwork wishes come true\", If( isPageSummary = 2, \"Basic info about your Team\", If( isPageSummary = 3, \"Channels\", If( isPageSummary = 4, \"Your Library\", If( isPageSummary = 5, \"Your List\", If( isPageSummary = 6, \"Looks good?\", \"You made it! \" ) ) ) ) ) ) For Text , Width and X of your Next button refer to PopUps Set OnSelect to If( isPageSummary = 1, UpdateContext({isPageSummary: 2}), If( isPageSummary = 2, UpdateContext({isPageSummary: 3}), If( isPageSummary = 3, UpdateContext({isPageSummary: 4}), If( isPageSummary = 4, UpdateContext({isPageSummary: 5}), If( isPageSummary = 5, UpdateContext({isPageSummary: 6}), If( isPageSummary = 6, //1. Teams - name, description, welcomepackage, SPListForTasks SubmitForm(FormTeamsRequest); Set(varTeam,FormTeamsRequest.LastSubmit); // 2. channels ForAll( colChannels, Patch( 'Team Channels', Defaults('Team Channels'), {'Channel Name': ChannelName, TeamsRequest: varTeam} ) ); //3. libraryname SubmitForm(FormLibraryName); UpdateContext({locLibrary:FormLibraryName.LastSubmit}); Patch('SharePoint Libraries',LookUp('SharePoint Libraries','SharePoint Library'=locLibrary.'SharePoint Library'),{TeamsRequest:varTeam}); //Patch('SharePoint Libraries',LookUp('SharePoint Libraries','SharePoint Library'=); //4. columnname and column types for library ForAll( colColumnsLibrary1, Patch( 'List Columns', Defaults('List Columns'), { 'Column Name': Name, 'Column Type': Type.Value, 'Column Values': Left( ColumnValues, Len(ColumnValues) - 2 ), 'SharePoint Library': FormLibraryName.LastSubmit } ) ); //5. list name SubmitForm(FormListName); UpdateContext({locList:FormListName.LastSubmit}); Patch('SharePoint Lists',LookUp('SharePoint Lists','SharePoint List'=locList.'SharePoint List'),{TeamsRequest:varTeam}); //6. columnname and column types for list ForAll( colColumnsList, Patch( 'List Columns', Defaults('List Columns'), { 'Column Name': Name, 'Column Type': Type.Value, 'Column Values': Left( ColumnValues, Len(ColumnValues) - 2 ), 'SharePoint List': FormListName.LastSubmit } ) ); //7. nav to pageSummary 7 UpdateContext({isPageSummary: 7}), //close app Exit() ) ) ) ) ) ); A little polish: We want a checkbox to be displayed before the very last step so that our user needs to confirm that they understood that this is the point of no return. Create a Checkbox on the CheckOut Screen Set its Visible to If(isShowSummary=true &&isPageSummary=6,true, false) - which shows it only on the last page of the Summary PopUp Set its Text to \"Yes I understand that I can't change my request anymore after I selected the SUBMIT button\" Set DisplayMode of the Next button to If(isPageSummary=6 && Checkbox1.Value=false, Disabled, Edit) - this way, the button is only selectable, if user checked the checkbox.","title":"How to build"},{"location":"corecomponents/howtobuildthecanvasapp/#how-to-build-the-canvas-app","text":"Although we give you the zipped files of the canvas app in our solution, you can also follow these instructions if you want to rebuild it. It will also make it easier to understand how everything works if you want to contribute to ProvisionGenie.","title":"How to build the canvas app"},{"location":"corecomponents/howtobuildthecanvasapp/#basic-ui-concepts","text":"This app is designed to be a personal app in Microsoft Teams and we aimed to adopt the Teams look & feel by following the guidance available in the Microsoft Teams UI Toolkit . This means, that we will not explain all basic UI components in this document but refer to the Toolkit.","title":"Basic UI concepts"},{"location":"corecomponents/howtobuildthecanvasapp/#colors","text":"Set variables onStart for the colors you use the most- for example: Set(color_blurple,ColorValue(\"#6264A7\")) and Set(color_bg,ColorValue(\"#F5F5F5\")) This way, you can refer to these values - or change them, if needed, more easily.","title":"Colors"},{"location":"corecomponents/howtobuildthecanvasapp/#navigation","text":"Create a _selectedScreen variable as a record containing row (number) title (text) image (image) and create a NavigationMenu collection in onStart , wrap both in Concurrent() : Concurrent( Set( _selectedScreen, { Row: 1, Title: \"Welcome\", Image: ic_fluent_home_48_regular } ), ClearCollect( NavigationMenu, { Row: 1, Title: \"Welcome\", Image: ic_fluent_home_48_regular }, { Row: 2, Title: \"Teams\", Image: ic_fluent_people_32_regular }, { Row: 3, Title: \"Channels\", Image: ic_fluent_text_bullet_list_square_24_regular }, { Row: 4, Title: \"Libraries\", Image: ic_fluent_document_48_regular }, { Row: 5, Title: \"Lists\", Image: ic_fluent_clipboard_bullet_list_ltr_20_regular }, { Row: 6, Title: \"Checkout\", Image: ic_fluent_checkbox_checked_24_regular } ) (To make this work replace the name of the images with the images you uploaded \ud83d\udca1 Create a gallery with Rectangle Text label Image Set Items of the gallery to NavigationMenu Set TemplateFill to If(ThisItem.Row = _selectedScreen.Row, RGBA(220, 220, 220, 1), RGBA(0,0,0,0)) Set OnSelect to Set( _selectedScreen, ThisItem ); If( ThisItem.Row = 1, Navigate( 'Welcome Screen', None ), ThisItem.Row = 2, Navigate( 'Teams Screen', None ), ThisItem.Row = 3, Navigate( 'Channel Screen', None ), ThisItem.Row = 4, Navigate( 'Libraries Screen', None ), ThisItem.Row = 5, Navigate( 'Lists Screen', None ), ThisItem.Row = 6, Navigate( 'Checkout Screen', None ) ) Set Visible of the rectangle to ThisItem.Row = _selectedScreen.Row Set Text of the TextLabel to ThisItem.Title Set Image of the Image to ThisItem.Image Keep in mind to always Set(_selectedScreen,{Title: \"your screenname\", Row: <rownumber>}) in addition to Navigate(your screenname) if you want to let the user navigate to another screen not using the navigation gallery.","title":"Navigation"},{"location":"corecomponents/howtobuildthecanvasapp/#sidepanel","text":"The SidePanel consists of 2 tabs, Details and Resources and we use 2 Textlabels for the tab names 2 Rectangles as an underline for the tab names at least 2 HTMLText controls to display content depending on the tab This is how it works: Set HTMLText of HTML text control to <div style='margin: 0 0 0 20px; font-size: 11pt !important; font-weight: lighter; color: #252525; padding: 0 10px; width: 100%; overflow: hidden;'> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 1 <br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 2<br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 3<br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 4<br><br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 5<br> </div> <div style=\"\"clear: both\"\"></div> <div style=\"\"float: left; width: 20px; text-align: right; margin: 0 20px 0 0; font-weight: bold;\"\" >*</div> <div style=\"\"float: left; width: 75%; \"\"> Step 6<br> </div> Repeat with different text in the second HTML text control Set OnSelect of the Details Textlabel to UpdateContext({IsShowResourcesTab: false}) Set OnSelect of the Resources Textlabel to UpdateContext({IsShowResourcesTab:true}) Set Visible of the Resources HTMLText to IsShowResourcesTab Set Visible of the Resources Rectangle to IsShowResourcesTab Set Visible of the Details HTMLText to !IsShowResourcesTab Set Visible of the Details Rectangle to !IsShowResourcesTab Set FontWeight of Details textlabel to If(!IsShowResourcesTab,FontWeight.Bold, FontWeight.Lighter) Set FontWeight of Resources textlabel to If(IsShowResourcesTab,FontWeight.Bold, FontWeight.Lighter) This way, the content of Resources gets visible once the Details content is non-visible and vice versa. Also, user switches between the content by selecting the respecting text labels. Font-weight will switch from lighter to bold and Rectangle (that serves as an underline) will be visible once user selects a Textlabel","title":"SidePanel"},{"location":"corecomponents/howtobuildthecanvasapp/#popup","text":"In the app, we make use of various PopUps, either to educate users about how to work in Microsoft Teams, or to explain something that users can request (like 'Welcome Package') or to indicate a success. Most PopUps contain 3 different pages, which means that we need 3 times different content for them as well Popups contain the following controls: Textlabel that serves as a Title for this PopUp TextLabel that serves as the main content for this PopUp Rectangle that serves as a Dimmer Button that serves as background for the PopUp Circles that serves as Stepper Dots so users can select them to navigate back and forth of the pages Cancel icon to close the PopUp HTMLtext to create a shadow around the PopUp 2 Buttons for next/back Image Rectangle to prettify the PopUp","title":"PopUp"},{"location":"corecomponents/howtobuildthecanvasapp/#rectangle-as-dimmer","text":"Purpose here is do create a lightbox effect and to dim everything but the PopUp itself. Following the Teams UI Toolkit: Set Fill to RGBA(37, 36, 35, 0.75) Set size to the entire screen","title":"Rectangle as Dimmer"},{"location":"corecomponents/howtobuildthecanvasapp/#button-that-serves-as-background","text":"As Rectangles in Power Apps don't support rounded corners (Border radius) we will use a Button instead. Set Width to 600 Set Height to 480 Set Color to White Set Hover color to White Set Pressed color to White Set Border radius to 3","title":"Button that serves as background"},{"location":"corecomponents/howtobuildthecanvasapp/#circles-that-serves-as-stepper-dots","text":"Create 3 circles Set their Width to 8 Set their Height to 8 Align them horizontally Set OnSelect of Circle1 to UpdateContext({isPage:1}) Set OnSelect of Circle2 to UpdateContext({isPage:2}) Set OnSelect of Circle3 to UpdateContext({isPage:3}) Set Fill of Circle1 to If(isPage=1,color_blurple,color_bg) Set Fill of Circle2 to If(isPage=2,color_blurple,color_bg) Set Fill of Circle3 to If(isPage=3,color_blurple,color_bg) This way, the circle is color_blurple on the correct page.","title":"Circles that serves as Stepper Dots"},{"location":"corecomponents/howtobuildthecanvasapp/#cancel-icon-to-close-the-popup","text":"Place your Cancel icon at the upper right hand corner of the button Set OnSelect to UpdateContext({isShowPopUp: false})","title":"Cancel icon to close the PopUp"},{"location":"corecomponents/howtobuildthecanvasapp/#htmltext-to-create-a-shadow-around-the-popup","text":"To have a nice shadow around the PopUp Create an HTMLtext control Set its HTMLtext to \"<div style='margin:10px;width:600px;height:480px;background-color:#;box-shadow:0 3px 6px 1px #252525; border-radius:3px'></div>\" Rearrange controls so that the shadow is underneath the button","title":"HTMLtext to create a shadow around the PopUp"},{"location":"corecomponents/howtobuildthecanvasapp/#next-button","text":"Create a button Set colors as stated in Teams UI Toolkit if you like this to be design consistent to Teams, otherwise choose your own colors (preferably set them as variables) Set OnSelect to If( isPage= 1, UpdateContext({isPage: 2}), If( isPageTrack = 2, UpdateContext({isPage: 3}), UpdateContext({isShowPopUp: false}) ) ) This way, users navigate to the next screen if they are on page 1 or 2 and close the PoPup if they are on page 3. Set Text to If(isPage=1,\"yourtext-->2\",If(isPage=2,\"yourtext-->3\",\"Close\")) This way, we display different texts depending on the page our user is currently at Set Width to If(isPage=1,<value1>,If(isPage=2, <value2>,<value3>) This way, the width of the button adjusts Set X to If(isPage=1,<value1>,If(isPage=2, <value2>,<value3>) to adjust horizontal position of the button. To calculate this correctly, place the button by drag'n'drop where you want it. Now check the x-value, add the width to it. This is your target value. For the other pages, you will need to deduct the width of the button from that target value so you get the x-value of the button on that page. If you have more than 1 PopUp, it's worth to think about parameterizing this as well","title":"Next button"},{"location":"corecomponents/howtobuildthecanvasapp/#back-button","text":"Create a button Set colors as stated in Teams UI Toolkit if you like this to be design consistent to Teams, otherwise choose your own colors (preferably set them as variables) Set OnSelect to If( isPage = 1, UpdateContext({isPage: 3}), If( isPage = 3, UpdateContext({isPageConversations: 2}), UpdateContext({isPageConversations:1}) ) ) This way, users navigate to the previous screen.","title":"Back button"},{"location":"corecomponents/howtobuildthecanvasapp/#image","text":"Insert an image Set Width to 600 Set Height to 240 Set Image to If(isPage=1,<image1>,If(isPage=2,<image2>,<image3>)) You will notice, that due to the Border radius of the background button, the edges of the image don't look like 90\u00b0 corners. This is why we will insert a rectangle to cover this","title":"Image"},{"location":"corecomponents/howtobuildthecanvasapp/#rectangle","text":"Create a Rectangle Set its Fill to `White** Set Width to 600 Set Height to 17 Place it so it overlaps with the rounded corners","title":"Rectangle"},{"location":"corecomponents/howtobuildthecanvasapp/#label-for-the-title","text":"Each page should have a title. Create a Textlabel Set its Text to If(isPage=1,<yourTitle1>,If(isPage=2,<yourTitle2>,<yourTitle3>))","title":"Label for the Title"},{"location":"corecomponents/howtobuildthecanvasapp/#label-for-the-main-content","text":"Create a Textlabel Set its Text to If(isPage=1,<yourContent1>,If(isPage=2,<yourContent2>,<yourContent>)) To display this PopUp you will need to do the following steps: group the controls Set Visible of the group to isShowPopUp trigger this PopUp - this could be another button, which OnSelect needs to be set to UpdateContext({isShowPopUp: true})","title":"Label for the main content"},{"location":"corecomponents/howtobuildthecanvasapp/#screens","text":"Navigation and side panel will be shown on every screen, only the HTMLtext in the SidePanel changes to contextually display details (how to use this screen) and resources (learning content about Teams). In addition to that, we need the following controls:","title":"Screens"},{"location":"corecomponents/howtobuildthecanvasapp/#welcome-screen","text":"We built 1 Welcome PopUps that is triggered by AppStart and introduces users on three pages what this app is about 4 different PopUps for the learning content 4 respecting Cards that serve as a more beautiful trigger for these PopUps 1 Button to navigate to the Teams screen and start the provisioning process Set OnSelect of this Button to Navigate( 'Teams Screen', ScreenTransition.Cover ); Set( _selectedScreen, { Title: \"Teams\", Row: 2 } )","title":"Welcome Screen"},{"location":"corecomponents/howtobuildthecanvasapp/#teams-screen","text":"Purpose if this screen is to get information about name description whether our owner (= signed-in user) wants a 'WelcomePackage' or not whether our owner wants a SharePoint list provisioned for task management We get the information by a form which is connected to a DataVerse table Teams Requests - see also Solution Overview A few notes: We modified the styling of the DataCards of the Form to match the criteria of Teams Toolkit. For the yes/no question about the SharePoint list as a task management tool, we build another PopUp to explain this. For info on why we don't provision see Architecture Decisions We changed the default dropdown fields to toggles. To connect those again to your data source, a little extra work is required:","title":"Teams Screen"},{"location":"corecomponents/howtobuildthecanvasapp/#modify-the-form-with-toggles-instead-of-dropdown","text":"in the form, delete the dropdown control insert into the datacard a toggle set Default of the Card to If(Toggle1.Value,'Do you want the welcome package? (TeamsRequests)'.Yes,'Do you want the welcome package? (TeamsRequests)'.No) Set Update of the toggle to If( ThisItem.'Do you want the welcome package?' = 'Do you want the welcome package? (TeamsRequests)'.Yes, true, ThisItem.'Do you want the welcome package?' = 'Do you want the welcome package? (TeamsRequests)'.No, false ) This way, we match the toggle value with our Dataverse column. The Next button's OnSelect is set to Navigate( 'Channel Screen', ScreenTransition.Cover ); Set( _selectedScreen, { Title: \"Channels\", Row: 3 } ); Set( TeamName, DataCardValue1_1.Text ); Set( TeamsDescription, DataCardValue3_1.Text ); Set( isWelcomePackage, Toggle1.Value ); Set( isSharePointListTasks, Toggle1_1.Value ) Which navigates to the next Channels screen, sets the Navigation correctly and saves the values in variables. Please note, that at this point we won't submit this form to the data source.","title":"Modify the form with toggles instead of dropdown"},{"location":"corecomponents/howtobuildthecanvasapp/#channels-screen","text":"On this screen, our owner-to-be can create the channels they want to be provisioned in their new Team. We work here with: 1 TextInput to get a value a Button to add this value into a collection a Button to clear the collection a gallery to display the collection","title":"Channels Screen"},{"location":"corecomponents/howtobuildthecanvasapp/#add-button","text":"Set its OnSelect to If(txtTagToAdd.Text in colChannels.ChannelName, Notify( \"You already added this Channel. Please try again with a different name.\", NotificationType.Warning ), Collect( colChannels,{ChannelName: txtTagToAdd.Text }); UpdateContext({locClearTextInput: true}); UpdateContext({locClearTextInput: false}) ); This way, we use the Notify function to warn our user in case they add a Channel name that already exists in collection. If the channel name does not exist already in the collection, we add it.Then we update a variable that controls the Reset property of the TextInput, so that its always empty again after we added a channel name to the collection.","title":"Add Button"},{"location":"corecomponents/howtobuildthecanvasapp/#textinput","text":"Set Reset to locClearTextInput","title":"TextInput"},{"location":"corecomponents/howtobuildthecanvasapp/#clear-button","text":"In case our user wants to start all over again, we give them a button to do so. Set OnSelect to Clear(colChannels); UpdateContext({locClearTextInput: true}); UpdateContext({locClearTextInput: false}) which empties the collection and updates the variables that controls the Reset property of TexInput again.","title":"Clear Button"},{"location":"corecomponents/howtobuildthecanvasapp/#gallery","text":"Set Items to colChannels Set the Text of Title Textlabel in the gallery to ThisItem.ChannelName Change the default Nextarrow icon to a Cancel icon and set its OnSelect to RemoveIf(colChannels,ChannelName=ThisItem.ChannelName) This way, our user can review the list of channels and even remove some of them again. This neat solution is described in more detail on Carmen Ysewijn's blog","title":"Gallery"},{"location":"corecomponents/howtobuildthecanvasapp/#the-next-button","text":"With this button we want to set a variable that concatenates the Channels to a single string with, separated by , , navigate to the next screen and set our navigation correctly. To achieve this, set OnSelect to Set( varChannels, Concat( colChannels, ChannelName & \", \" ) ); Navigate('Libraries Screen',Cover); Set( _selectedScreen, { Title: \"Libraries\", Row: 4 } )","title":"The Next button"},{"location":"corecomponents/howtobuildthecanvasapp/#libraries-screen","text":"We want to give users a way to get an additional library - and in this screen we want to get information on library name columns to add column types for the columns to add column values for choice columns Like in the channel screen, we want users to review their inputs again We will need for that Form for the library name Form for Column Names and Column Types TextInput for Column Values of Choice Columns Gallery to display the Column Values for Choice Columns Gallery to display Column Names and Column Types Add Column Button","title":"Libraries Screen"},{"location":"corecomponents/howtobuildthecanvasapp/#form-for-library-name","text":"This Form connects to SharePoint Libraries table in Dataverse, please also see Solution Overview.","title":"Form for Library Name"},{"location":"corecomponents/howtobuildthecanvasapp/#form-for-column-name-and-column-type","text":"This Form connects to our List Columns table in Dataverse, please also see Solution Overview. Set Items of the Column Type Dropdown to Choices('Column Type')","title":"Form for Column Name and Column Type"},{"location":"corecomponents/howtobuildthecanvasapp/#the-textinput","text":"In case user wants to add a choice column, we display another TextInput control, which will then use the same approach as described in the Channels screen: User adds a value and confirms it by selecting an icon and we collect the values into a collection, then we display this collection in a gallery. Create a TexInput Create an icon in that TextInput Set OnSelect of the icon to Collect( ColChoicesLibrary, {Choice: TxtInputLibraryChoices.Text} ); Reset(TxtInputLibraryChoices)","title":"The TextInput"},{"location":"corecomponents/howtobuildthecanvasapp/#gallery-to-display-the-column-values-for-choice-columns","text":"Create a gallery Set Items to ColChoicesLibrary Change the default NextArrow icon to a cancel icon Set its OnSelect to RemoveIf(ColChoicesLibrary,Choice=ThisItem.Choice) Set its Visible to isShowGalleryLibrary Set OnVisible of Libraries Screen to UpdateContext({isShowGalleryLibrary: false});","title":"Gallery to display the Column Values for Choice Columns"},{"location":"corecomponents/howtobuildthecanvasapp/#add-columns-button","text":"This button shall add the values (column name, column type and column values of choice columns) to a collection. Create a button Set its OnSelect to Collect( colColumnsLibrary, { Name: <DataCardValueWhichHoldsTheName>.Text, Type: <DataCardValueWhichHoldsTheType>.Selected, ColumnValues: Concat( ColChoicesLibrary, Choice & \", \" ) } ); UpdateContext({isShowGalleryLibrary: true}); Clear(ColChoicesLibrary1); ResetForm('Form ColumnName-ColumnType') This means, that we will add the name of the column and the type of the column by getting the values from the respecting DataCards and use Concat() again to make a single string from the column choices values. Also, we show the gallery as we set a variable isShowGalleryLibrary and reset the the ColumnName-ColumnValue form. Set Displaymode of the button to If( IsBlank(<DataCardValueWhichHoldsTheName>) = true || IsBlank(DataCardValueWhichHoldsTheType>.Selected.Value), Disabled, Edit ) This way, our Add button will only be selectable if column name and column value are not empty.","title":"Add columns Button"},{"location":"corecomponents/howtobuildthecanvasapp/#gallery-to-display-column-names-and-column-types","text":"Create a gallery Select the Title, Subtitle and Body layout Set Items to colColumnsLibrary Set Text of the Title field to ThisItem.Name - it refers to the name of the column Set Text of the subtitle field to ThisItem.Type.Value - it refers to the selected value of the column type Set Text of the body field to Left(ThisItem.ColumnValues, Len(ThisItem.ColumnValues)-2) - it refers to the column values for choice columns but gets rid of the last , at the end of the string using Left() which returns a string with a certain amount of characters Len() which returns the number of characters of a string -2 because , (comma space) is 2 characters and we want to shorten the string by these to characters Change the by default NextArrow icon to a Cancel icon and set its OnSelect to RemoveIf(colColumnsLibrary1,Name=ThisItem.Name) so that the user can remove this item if they want to.","title":"Gallery to display Column Names and Column Types"},{"location":"corecomponents/howtobuildthecanvasapp/#next-button_1","text":"Our Next or Save library is supposed to do a few things: Set a variable for the library name (remember, we did not submit the form to our data source) Display a PopUp to indicate that the library was saved To achieve this, Create a button Set its OnSelect to Set( IsShowSavedLibraries, true ); Set( varLibraryName, <DataCardValueWhichHoldsLibraryName>.Text )","title":"Next Button"},{"location":"corecomponents/howtobuildthecanvasapp/#lists-screen","text":"The Lists screen is following the same approach as the library screen, because we need the very same information about an additional list as for an additional library. Of course we collect the values in different collections, but all controls and the entire logic stays the same.","title":"Lists Screen"},{"location":"corecomponents/howtobuildthecanvasapp/#checkout-screen","text":"In the checkout screen, we want to display a PopUp in which the user may review all their responses - and return to a specific screen if they would want to correct something. Create a PopUp, this time with 7 pages - this also means 7 different images, titles, contents and stepper dots Set OnVisible to UpdateContext({isShowSummary: true});UpdateContext({isPageSummary: 1}) Set Visible of the entire PopUpGroup to isShowSummary Set Text of your main content Textlabel to If( isPageSummary = 1, \"please review your request before you submit it\", If( isPageSummary = 2, \"Teamname: \" & TeamName & Char(13) & \"Description: \" & TeamsDescription & Char(13) & \"Owner: \" & User().Email & Char(13) & \"Welcome Package: \" & If( isWelcomePackage = true, \"yes, please!\", \"no thank you\" ) & Char(13) & \"Microsoft List for task management: \" & If( isSharePointListTasks = true, \"yes, please\", \"no thank you\" ) & Char(13), If( isPageSummary = 3, \"We will create the following channels for you: \" & Char(13) & Char(13) & Left( varChannels, Len(varChannels) - 2 ), If( isPageSummary = 4, \"We will create a library called '\" & varLibrary1Name & \"' for you with the following columns: \" & Char(13) & Char(13) & Left( Concat( colColumnsLibrary1, Name & \", \" ), Len( Concat( colColumnsLibrary1, Name & \", \" ) ) - 2 ), If( isPageSummary = 5, \"We will create a list called '\" & varListName & \"' for you with the following columns: \" & Char(13) & Char(13) & Left( Concat( colColumnsList, Name & \", \" ), Len( Concat( colColumnsList, Name & \", \" ) ) - 2 ), If( isPageSummary = 6, \"If everything looks ok, hit SUBMIT! \" & Char(13) & Char(13) & \"If you need to correct something, close this PopUp and navigate to the respecting screen. You can then return to this summary later\", If( isPageSummary = 7, \"you can close the app now - See you next time when you like to create a Team\" ) ) ) ) ) ) ) Set Text of the title Textlabel to If( isPageSummary = 1, \"Let's make your teamwork wishes come true\", If( isPageSummary = 2, \"Basic info about your Team\", If( isPageSummary = 3, \"Channels\", If( isPageSummary = 4, \"Your Library\", If( isPageSummary = 5, \"Your List\", If( isPageSummary = 6, \"Looks good?\", \"You made it! \" ) ) ) ) ) ) For Text , Width and X of your Next button refer to PopUps Set OnSelect to If( isPageSummary = 1, UpdateContext({isPageSummary: 2}), If( isPageSummary = 2, UpdateContext({isPageSummary: 3}), If( isPageSummary = 3, UpdateContext({isPageSummary: 4}), If( isPageSummary = 4, UpdateContext({isPageSummary: 5}), If( isPageSummary = 5, UpdateContext({isPageSummary: 6}), If( isPageSummary = 6, //1. Teams - name, description, welcomepackage, SPListForTasks SubmitForm(FormTeamsRequest); Set(varTeam,FormTeamsRequest.LastSubmit); // 2. channels ForAll( colChannels, Patch( 'Team Channels', Defaults('Team Channels'), {'Channel Name': ChannelName, TeamsRequest: varTeam} ) ); //3. libraryname SubmitForm(FormLibraryName); UpdateContext({locLibrary:FormLibraryName.LastSubmit}); Patch('SharePoint Libraries',LookUp('SharePoint Libraries','SharePoint Library'=locLibrary.'SharePoint Library'),{TeamsRequest:varTeam}); //Patch('SharePoint Libraries',LookUp('SharePoint Libraries','SharePoint Library'=); //4. columnname and column types for library ForAll( colColumnsLibrary1, Patch( 'List Columns', Defaults('List Columns'), { 'Column Name': Name, 'Column Type': Type.Value, 'Column Values': Left( ColumnValues, Len(ColumnValues) - 2 ), 'SharePoint Library': FormLibraryName.LastSubmit } ) ); //5. list name SubmitForm(FormListName); UpdateContext({locList:FormListName.LastSubmit}); Patch('SharePoint Lists',LookUp('SharePoint Lists','SharePoint List'=locList.'SharePoint List'),{TeamsRequest:varTeam}); //6. columnname and column types for list ForAll( colColumnsList, Patch( 'List Columns', Defaults('List Columns'), { 'Column Name': Name, 'Column Type': Type.Value, 'Column Values': Left( ColumnValues, Len(ColumnValues) - 2 ), 'SharePoint List': FormListName.LastSubmit } ) ); //7. nav to pageSummary 7 UpdateContext({isPageSummary: 7}), //close app Exit() ) ) ) ) ) ); A little polish: We want a checkbox to be displayed before the very last step so that our user needs to confirm that they understood that this is the point of no return. Create a Checkbox on the CheckOut Screen Set its Visible to If(isShowSummary=true &&isPageSummary=6,true, false) - which shows it only on the last page of the Summary PopUp Set its Text to \"Yes I understand that I can't change my request anymore after I selected the SUBMIT button\" Set DisplayMode of the Next button to If(isPageSummary=6 && Checkbox1.Value=false, Disabled, Edit) - this way, the button is only selectable, if user checked the checkbox.","title":"Checkout Screen"},{"location":"corecomponents/logicapps/","text":"Azure Logic Apps \u00b6 We created 5 Azure Logic Apps to handle the provisioning of the Teams: Our flows pick up the values logged in the Dataverse tables to provision what the user requested: 1. Main flow 2. Create team Azure Logic Apps 1. Main flow 2. Create team 3. Create List/Library 4. Create Task List 5. Welcome Package 1. Main flow \u00b6 The main flow takes care of the logic of the flows: executing the different steps in the right order and providing the right input. An overview of the Logic App is added below. The main flow triggers when a new row is added into the Teams Requests table in Dataverse. The internal name of the to be created team is generated using the name provided by the team owner and a generated guid. This ensures that all team names are unique. The technical name is updated in the Teams Request row so that admins can easily find out which requests are linked to which Microsoft Teams teams. 5 variables are initialized that are used later on in the flow Channels : contains the array representation of the channels that need to be created. DriveExistsCode : stores the response of an HTTP request to check whether the SharePoint library has already been created for the team. SiteExistsCode : stores the response of an HTTP request to check whether the SharePoint site for the team has already been created. LibraryColumns : array representation of the columns that need to be created in the library. ListColumns : array representation of the columns that need to be created in the list. A 1 minute delay is added to ensure that the channels and other related table rows are linked to the Teams request row in Dataverse, since these cannot be linked upon creation of the Teams request row. The team is created in the Create Team scope, which is expanded below The related team channel rows are listed The channels are added into the Channels variable A child logic app is called with the team information and channels as input The Team ID is extracted from the child logic app's response We wait until we get confirmation that the SharePoint site for the team has been created We wait until we get confirmation that the default files library for the team has been created The folder path for the default files library is composed based on the output of the previous actions The lists and libraries defined in the request are created in the Create Lists and Libraries scope. The related list rows are listed For each related list The related columns are listed The column definition is added to the Columns variable A child logic app is called to create the list with its columns The related library rows are listed For each related library The related columns are listed The columns definition is added to the Columns variable A child logic app is called to create the library with its columns The task list is added to the team if the owner has indicated they want this in their team The welcome package is added to the team if the owner has indicated they want this in their team 2. Create team \u00b6 In the Create team flow, the requested team is created with the specified channels. Additionally, the wiki is removed from each of the channels. An overview of the flow is added below. The Logic Apps flow is triggered from an HTTP request, for example when being called as a child logic app 6 variables are initialized TechnicalName : the internal name that the team should be initialized with, this is used in the email address and SharePoint site url for the team. DisplayName : the name that users should see in the Microsoft Teams app. Description : the description of the team. TeamCreationRequestCode : variable to store the response the HTTP request to create the team to check whether the request was accepted. TeamCreationStatus : variable to store the response of an HTTP request to check whether the creation of the team has completed. NewTeamId : the ID of the new team. The information of the Team owner is requested to Azure AD using an HTTP request The owner information is parsed so its properties can be used later in the Logic Apps flow The group for the team is created as a private group The group creation request body is parsed to use the properties later in the Logic Apps flow The group ID is stored in the NewTeamId variable The following actions are done in a loop because this does not always succeed on the first try A request is sent to \"teamify\" the created group The status code is saved in the TeamCreationStatus variable If team creation has not been accepted, there is a delay of 10 seconds The loop will stop when the HTTP request to teamify the group has been accepted The headers of the team creation request are parsed to extract the information for use later in the Logic Apps flow The following actions are done in a loop because teamification of the group can take some time An HTTP request is sent to determine the creation status of the team for the group The response is parsed TeamsCreationStatus is updated with the status of the HTTP request If team creation has not succeeded, a 10 second delay is added The loop will stop when team creation has succeeded The channels that have been created in the team are listed Channel information is parsed so it can be used in the following actions For each channel The wiki tab is identified based on its name The wiki tab info is parsed The wiki tab is deleted from the channel A response is provided to the caller of the logic app with the team id. 3. Create List/Library \u00b6 The Create List and Create Library logic apps are nearly identical, except for the template type that is provided in the creation request. Therefore, they are discussed as one. \u26a0 In the future, these logic apps could be consolidated into one to simplify the solution. The logic app is triggered from a HTTP request, for example as a child logic app. A ListColumns variable is initialized to store the column definition For each of the columns that are specified in the trigger Depending on the type of column, append the column definition to the ListColumns variable Create the list/library using a request. This is where there is a difference between the Create List/Create Library Logic Apps flows. Respond to the request caller 4. Create Task List \u00b6 The Create Task list logic app uses the Create List logic app to create a task list using a fixed definition of columns. The Logic Apps flow is triggered from a HTTP request, for example as a child Logic Apps flow A listColumns variable is initialized with a fixed definition of the columns needed for the task list The Create List Logic Apps flow is called with the task list fixed column definition to create the task list Respond to the request caller 5. Welcome Package \u00b6 The welcome package adds a url with training material to the General channel of the new team The Logic Apps is triggered from a HTTP request, for example as a child logic app The request body is parsed to extract the required information 2 variables are initialized: TeamId : the ID of the team to which the welcome package should be added Owner : the owner of the team (UPN) A HTTP request lists the channels in the team The channel info is parsed The General channel is always the first channel returned when the channels are listed, this is extracted from the channel info An HTTP request is sent to add the training material url as a website tab in the new team's general channel Respond to the request caller","title":"Overview"},{"location":"corecomponents/logicapps/#azure-logic-apps","text":"We created 5 Azure Logic Apps to handle the provisioning of the Teams: Our flows pick up the values logged in the Dataverse tables to provision what the user requested: 1. Main flow 2. Create team Azure Logic Apps 1. Main flow 2. Create team 3. Create List/Library 4. Create Task List 5. Welcome Package","title":"Azure Logic Apps"},{"location":"corecomponents/logicapps/#1-main-flow","text":"The main flow takes care of the logic of the flows: executing the different steps in the right order and providing the right input. An overview of the Logic App is added below. The main flow triggers when a new row is added into the Teams Requests table in Dataverse. The internal name of the to be created team is generated using the name provided by the team owner and a generated guid. This ensures that all team names are unique. The technical name is updated in the Teams Request row so that admins can easily find out which requests are linked to which Microsoft Teams teams. 5 variables are initialized that are used later on in the flow Channels : contains the array representation of the channels that need to be created. DriveExistsCode : stores the response of an HTTP request to check whether the SharePoint library has already been created for the team. SiteExistsCode : stores the response of an HTTP request to check whether the SharePoint site for the team has already been created. LibraryColumns : array representation of the columns that need to be created in the library. ListColumns : array representation of the columns that need to be created in the list. A 1 minute delay is added to ensure that the channels and other related table rows are linked to the Teams request row in Dataverse, since these cannot be linked upon creation of the Teams request row. The team is created in the Create Team scope, which is expanded below The related team channel rows are listed The channels are added into the Channels variable A child logic app is called with the team information and channels as input The Team ID is extracted from the child logic app's response We wait until we get confirmation that the SharePoint site for the team has been created We wait until we get confirmation that the default files library for the team has been created The folder path for the default files library is composed based on the output of the previous actions The lists and libraries defined in the request are created in the Create Lists and Libraries scope. The related list rows are listed For each related list The related columns are listed The column definition is added to the Columns variable A child logic app is called to create the list with its columns The related library rows are listed For each related library The related columns are listed The columns definition is added to the Columns variable A child logic app is called to create the library with its columns The task list is added to the team if the owner has indicated they want this in their team The welcome package is added to the team if the owner has indicated they want this in their team","title":"1. Main flow"},{"location":"corecomponents/logicapps/#2-create-team","text":"In the Create team flow, the requested team is created with the specified channels. Additionally, the wiki is removed from each of the channels. An overview of the flow is added below. The Logic Apps flow is triggered from an HTTP request, for example when being called as a child logic app 6 variables are initialized TechnicalName : the internal name that the team should be initialized with, this is used in the email address and SharePoint site url for the team. DisplayName : the name that users should see in the Microsoft Teams app. Description : the description of the team. TeamCreationRequestCode : variable to store the response the HTTP request to create the team to check whether the request was accepted. TeamCreationStatus : variable to store the response of an HTTP request to check whether the creation of the team has completed. NewTeamId : the ID of the new team. The information of the Team owner is requested to Azure AD using an HTTP request The owner information is parsed so its properties can be used later in the Logic Apps flow The group for the team is created as a private group The group creation request body is parsed to use the properties later in the Logic Apps flow The group ID is stored in the NewTeamId variable The following actions are done in a loop because this does not always succeed on the first try A request is sent to \"teamify\" the created group The status code is saved in the TeamCreationStatus variable If team creation has not been accepted, there is a delay of 10 seconds The loop will stop when the HTTP request to teamify the group has been accepted The headers of the team creation request are parsed to extract the information for use later in the Logic Apps flow The following actions are done in a loop because teamification of the group can take some time An HTTP request is sent to determine the creation status of the team for the group The response is parsed TeamsCreationStatus is updated with the status of the HTTP request If team creation has not succeeded, a 10 second delay is added The loop will stop when team creation has succeeded The channels that have been created in the team are listed Channel information is parsed so it can be used in the following actions For each channel The wiki tab is identified based on its name The wiki tab info is parsed The wiki tab is deleted from the channel A response is provided to the caller of the logic app with the team id.","title":"2. Create team"},{"location":"corecomponents/logicapps/#3-create-listlibrary","text":"The Create List and Create Library logic apps are nearly identical, except for the template type that is provided in the creation request. Therefore, they are discussed as one. \u26a0 In the future, these logic apps could be consolidated into one to simplify the solution. The logic app is triggered from a HTTP request, for example as a child logic app. A ListColumns variable is initialized to store the column definition For each of the columns that are specified in the trigger Depending on the type of column, append the column definition to the ListColumns variable Create the list/library using a request. This is where there is a difference between the Create List/Create Library Logic Apps flows. Respond to the request caller","title":"3. Create List/Library"},{"location":"corecomponents/logicapps/#4-create-task-list","text":"The Create Task list logic app uses the Create List logic app to create a task list using a fixed definition of columns. The Logic Apps flow is triggered from a HTTP request, for example as a child Logic Apps flow A listColumns variable is initialized with a fixed definition of the columns needed for the task list The Create List Logic Apps flow is called with the task list fixed column definition to create the task list Respond to the request caller","title":"4. Create Task List"},{"location":"corecomponents/logicapps/#5-welcome-package","text":"The welcome package adds a url with training material to the General channel of the new team The Logic Apps is triggered from a HTTP request, for example as a child logic app The request body is parsed to extract the required information 2 variables are initialized: TeamId : the ID of the team to which the welcome package should be added Owner : the owner of the team (UPN) A HTTP request lists the channels in the team The channel info is parsed The General channel is always the first channel returned when the channels are listed, this is extracted from the channel info An HTTP request is sent to add the training material url as a website tab in the new team's general channel Respond to the request caller","title":"5. Welcome Package"},{"location":"corecomponents/solutionoverview/","text":"Solution overview \u00b6 ProvisionGenie \ud83d\udc9c Microsoft Graph! Our entire provision process leverages the power of Microsoft Graph API and we plan to continue with this in future versions with extended use cases. Learn more about Microsoft Graph . To understand why we chose this set of services, head over to Architecture Decisions Based on user input in the canvas app, ProvisionGenie logs team requests. Each new row in the Teams Request table will trigger the Main flow in Azure Logic Apps, which will then handle all other child flows:","title":"Solution Overview"},{"location":"corecomponents/solutionoverview/#solution-overview","text":"ProvisionGenie \ud83d\udc9c Microsoft Graph! Our entire provision process leverages the power of Microsoft Graph API and we plan to continue with this in future versions with extended use cases. Learn more about Microsoft Graph . To understand why we chose this set of services, head over to Architecture Decisions Based on user input in the canvas app, ProvisionGenie logs team requests. Each new row in the Teams Request table will trigger the Main flow in Azure Logic Apps, which will then handle all other child flows:","title":"Solution overview"},{"location":"deploymentguide/","text":"Deployment Guide \u00b6 This guide shall walk you through the minimal path to awesome. It lists all steps required to successfully deploy ProvisionGenie in your tenant. If you haven't done this by now, familiarize yourself with our solution overview . Prerequisites \u00b6 Azure Subscription - if you don't have one, get it here free - also see Cost estimation Microsoft 365 license Power Apps per app or Power Apps per user plan (for using Dataverse, also see Architecture Decisions ) Environment with Dataverse database - you can create one during the deployment process Admin role Azure: Contributor Power Platform role: System Administrator Deployment steps \u00b6 In order to successfully deploy ProvisionGenie, you will need to perform the following steps 0. Fork and clone this repository 1. App registration to access Dataverse tables 2. Import Dataverse solution 3. Create new Azure resource groups 4. Azure Logic Apps 5. Add ProvisionGenie to Teams 6. Post Deployment cleanup","title":"Start"},{"location":"deploymentguide/#deployment-guide","text":"This guide shall walk you through the minimal path to awesome. It lists all steps required to successfully deploy ProvisionGenie in your tenant. If you haven't done this by now, familiarize yourself with our solution overview .","title":"Deployment Guide"},{"location":"deploymentguide/#prerequisites","text":"Azure Subscription - if you don't have one, get it here free - also see Cost estimation Microsoft 365 license Power Apps per app or Power Apps per user plan (for using Dataverse, also see Architecture Decisions ) Environment with Dataverse database - you can create one during the deployment process Admin role Azure: Contributor Power Platform role: System Administrator","title":"Prerequisites"},{"location":"deploymentguide/#deployment-steps","text":"In order to successfully deploy ProvisionGenie, you will need to perform the following steps 0. Fork and clone this repository 1. App registration to access Dataverse tables 2. Import Dataverse solution 3. Create new Azure resource groups 4. Azure Logic Apps 5. Add ProvisionGenie to Teams 6. Post Deployment cleanup","title":"Deployment steps"},{"location":"deploymentguide/0-forkclone/","text":"0. Fork and clone this repository \u00b6 You can successfully install and run ProvisionGenie without forking and cloning the repository, but it is highly recommended, to have all necessary files available locally. Also contributing to ProvisionGenie will be easier then. If you don't know how this works, read this article about How to get started with GitHub and Git .","title":"0. Fork and clone this repository"},{"location":"deploymentguide/0-forkclone/#0-fork-and-clone-this-repository","text":"You can successfully install and run ProvisionGenie without forking and cloning the repository, but it is highly recommended, to have all necessary files available locally. Also contributing to ProvisionGenie will be easier then. If you don't know how this works, read this article about How to get started with GitHub and Git .","title":"0. Fork and clone this repository"},{"location":"deploymentguide/1-appreg/","text":"1. App registration to access Dataverse tables \u00b6 You will need to register an app in Azure AD in order to access the dataverse tables in the Logic Apps. Go to portal.azure.com Log in Select Azure Active Directory (1) Select App registrations (2) Select New registration (1) Type in a name for your app like ProvisionGenieApp (2) Select Accounts in this organizational directory only ( only - Single tenant) (3) Select Register (1) Select API permissions (2) Select Add a permission (3) Select Dynamics CRM (1) Select user_impersonation (2) Select Add permissions (1) Grant admin consent (2) Confirm with Yes Let's now create a secret: (1) Select Certificates & secrets (2) Select New client secret (3) Enter a description like PG-secret (4) Select a value when this secret expires (5) Select Add Copy the secret's Value and save it somewhere, you can do this here: copied values -This way you have everything handy when you need it. We will ask you during this deployment process to save a couple of values. Please take care that you don't commit this file in case you want to contribute to ProvisionGenie. (1) Select Overview (2) Copy the Application (client)ID value, save it here: copied values (3) Copy the Directory (tenant)ID value, save it here: copied values That's it!","title":"1. App registration to access Dataverse tables"},{"location":"deploymentguide/1-appreg/#1-app-registration-to-access-dataverse-tables","text":"You will need to register an app in Azure AD in order to access the dataverse tables in the Logic Apps. Go to portal.azure.com Log in Select Azure Active Directory (1) Select App registrations (2) Select New registration (1) Type in a name for your app like ProvisionGenieApp (2) Select Accounts in this organizational directory only ( only - Single tenant) (3) Select Register (1) Select API permissions (2) Select Add a permission (3) Select Dynamics CRM (1) Select user_impersonation (2) Select Add permissions (1) Grant admin consent (2) Confirm with Yes Let's now create a secret: (1) Select Certificates & secrets (2) Select New client secret (3) Enter a description like PG-secret (4) Select a value when this secret expires (5) Select Add Copy the secret's Value and save it somewhere, you can do this here: copied values -This way you have everything handy when you need it. We will ask you during this deployment process to save a couple of values. Please take care that you don't commit this file in case you want to contribute to ProvisionGenie. (1) Select Overview (2) Copy the Application (client)ID value, save it here: copied values (3) Copy the Directory (tenant)ID value, save it here: copied values That's it!","title":"1. App registration to access Dataverse tables"},{"location":"deploymentguide/2-importsolution/","text":"2. Import Dataverse solution \u00b6 We built ProvisionGenie by using Dataverse mostly for security reasons. We do not want to give users a way to bypass the canvas app and access data they shouldn't have access to. This concern was one of our main reasons to not use SharePoint lists to log requests as you would need to share the list with every user. That means that they could create new items, manipulate and even delete data. For more information, head over to Architecture Decisions . In Dataverse, we can setup security roles to prevent this and we created two security roles ProvisionGenie Admin and ProvisionGenie User as part of the solution that you will import in the next steps. You will need to create an application user and assign the security roles to it. In case you don't already have an environment that you want to use for ProvisionGenie, follow these steps to create a new environment with a database Important to know: a Dataverse for Teams environment is not enough - for reference read our Architecture Decisions Import our solution with Dataverse tables to log the requests ProvisionGenie canvas app as the UI Security role ProvisionGenie Admin Security role Provision Genie User from here: ProvisionGenie Solution In case this is the first time you import a solution, follow the steps described here: Import a Power Platform solution It can take a little while: Once this step is completed, select the imported solution and check that it looks like this: Create an application user and the assign the security role Basic user and security role ProvisionGenie Admin as part of the creation process as described here: Create an application user Assign the security roles Basic user and Provision Genie User to all users that will be able to use ProvisionGenie for team creation. You can assign the roles to individual people using the steps explained here Alternatively, you can bulk assign roles to people by following the next steps: Go to the Power Platform admin center and select your environment (step 1 and 2 in the guide above) In the Access pane, select See all under Users Select Manage users in Dynamics 365 in the action bar at the top Select the users you want to assign the security role to, and afterwards select Manage roles in the action bar In the list with security roles, select Provision Genie user and then OK You need to obtain the Environment ID for a later step: Open make.powerapps.com Select the Settings gear Select Session details The value we need here is the Instance URL from make.powerapps.com , save it here: copied values","title":"2. Import Dataverse solution"},{"location":"deploymentguide/2-importsolution/#2-import-dataverse-solution","text":"We built ProvisionGenie by using Dataverse mostly for security reasons. We do not want to give users a way to bypass the canvas app and access data they shouldn't have access to. This concern was one of our main reasons to not use SharePoint lists to log requests as you would need to share the list with every user. That means that they could create new items, manipulate and even delete data. For more information, head over to Architecture Decisions . In Dataverse, we can setup security roles to prevent this and we created two security roles ProvisionGenie Admin and ProvisionGenie User as part of the solution that you will import in the next steps. You will need to create an application user and assign the security roles to it. In case you don't already have an environment that you want to use for ProvisionGenie, follow these steps to create a new environment with a database Important to know: a Dataverse for Teams environment is not enough - for reference read our Architecture Decisions Import our solution with Dataverse tables to log the requests ProvisionGenie canvas app as the UI Security role ProvisionGenie Admin Security role Provision Genie User from here: ProvisionGenie Solution In case this is the first time you import a solution, follow the steps described here: Import a Power Platform solution It can take a little while: Once this step is completed, select the imported solution and check that it looks like this: Create an application user and the assign the security role Basic user and security role ProvisionGenie Admin as part of the creation process as described here: Create an application user Assign the security roles Basic user and Provision Genie User to all users that will be able to use ProvisionGenie for team creation. You can assign the roles to individual people using the steps explained here Alternatively, you can bulk assign roles to people by following the next steps: Go to the Power Platform admin center and select your environment (step 1 and 2 in the guide above) In the Access pane, select See all under Users Select Manage users in Dynamics 365 in the action bar at the top Select the users you want to assign the security role to, and afterwards select Manage roles in the action bar In the list with security roles, select Provision Genie user and then OK You need to obtain the Environment ID for a later step: Open make.powerapps.com Select the Settings gear Select Session details The value we need here is the Instance URL from make.powerapps.com , save it here: copied values","title":"2. Import Dataverse solution"},{"location":"deploymentguide/3-createresourcegroup/","text":"3. Create new Azure resource groups \u00b6 The yet-to-deploy Azure Logic Apps will need a resource group to be deployed in. We recommend creating a new resource group ProvisionGenie . Additionally, you will need a second resource group ProvisionGenie-deploy in which you temporarily store the template files in. After successful deployment, you may delete this second resource group. \u26a1 Repeat the following steps for both resource groups Open portal.azure.com (1) Select the Menu (2) Select Resource groups (1) Select Create (2) Select a subscription (3) Enter the name of the Resource Group you wish to create: ProvisionGenie and for the second one ProvisionGenie-deploy (4) Select the region, save the value here: copied values (5) Select Review & create Notice the banner showing that validation passed Select Create On success, your new resource group will show up in the overview: As a last step in this section, obtain your Subscription ID: Select the resource group you just created Copy the value of the Subscription ID , save it here: copied values That's it!","title":"3. Create new Azure resource groups"},{"location":"deploymentguide/3-createresourcegroup/#3-create-new-azure-resource-groups","text":"The yet-to-deploy Azure Logic Apps will need a resource group to be deployed in. We recommend creating a new resource group ProvisionGenie . Additionally, you will need a second resource group ProvisionGenie-deploy in which you temporarily store the template files in. After successful deployment, you may delete this second resource group. \u26a1 Repeat the following steps for both resource groups Open portal.azure.com (1) Select the Menu (2) Select Resource groups (1) Select Create (2) Select a subscription (3) Enter the name of the Resource Group you wish to create: ProvisionGenie and for the second one ProvisionGenie-deploy (4) Select the region, save the value here: copied values (5) Select Review & create Notice the banner showing that validation passed Select Create On success, your new resource group will show up in the overview: As a last step in this section, obtain your Subscription ID: Select the resource group you just created Copy the value of the Subscription ID , save it here: copied values That's it!","title":"3. Create new Azure resource groups"},{"location":"deploymentguide/4-deploylogicapps/","text":"4. Deployment of Azure Logic Apps \u00b6 In the ProvisionGenie-deploy resource group, create a new storage account to store the template files Create Storage account \u00b6 Open portal.azure.com Select Resource groups Select the ProvisionGenie-deploy Select Create Search for storage account Select Storage account Select Create Fill out the form as shown: (1) Select your Azure subscription (2) Select the ProvisionGenie-deploy resource group (3) Type in a storage account name like provisiongeniedeploy (4) Select your preferred region (5) Select Review + create Review if everything looks ok - note that you see a Validation passed banner Select Create This will take a moment or two, the Azure portal will notify you once this step is completed. Copy the storage account name ( provisiongeniedeploy ), save it here: copied values Upload the deployment files into a container in the storage account \u00b6 in your new Storage account, (1) Select Containers (2) Select + Container (3) Type in templates in the form as a Name (4) Select Create Now upload the template files you can find in ARM folder into the templates container you just created: Select the templates container, then (1) Select Upload (2) Select the template files (3) Select Upload We will now create a Shared Access Token in the Container: (1) Select Shared access tokens (2) Select Generate SAS token and URL (3) Copy the Blob SAS token value, save it here: copied values prepare your deployment script \u00b6 In the following script, change the $originResourceGroupName value to ProvisionGenie-deploy $storageAccountName value to your storage account name $location value to your preferred location - in case you don't know the name (not: Displayname), you may obtain a list using Azure cloud shell with az account list-locations $QueryString value to the SAS token you just copied Execute the script in Azure cloud shell at shell.azure.com the script will run and prompt you to provide some parameters, they should now all be saved in here: copied values your Subscription ID the Environment ID (you obtained it as Instance URL ) the URL for learning material (if you don't know that for now, you can put https://m365princess.com or any other URL into it) the App ID from your Azure AD app registration the App secret from your Azure AD app registration the Tenant ID from you Azure AD app registration # Set values $originResourceGroupName = \"<your resource group name here>\" $storageAccountName = \"<your storage account name here>\" $containerName = \"templates\" $location = \"<your location here>\" $sasToken = \"<your SAS token here>\" # Create a key $key = ( Get-AzStorageAccountKey -ResourceGroupName $originResourceGroupName -Name $storageAccountName ). Value [ 0 ] $context = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $key $mainTemplateUri = $context . BlobEndPoint + \"$containerName/ARM-template.json\" $targetResourceGroupName = \"ProvisionGenie\" # Deploy New-AzResourceGroupDeployment ` -Name DeployLinkedTemplate ` -ResourceGroupName $targetResourceGroupName ` -TemplateUri $mainTemplateUri ` -QueryString $sasToken ` -verbose Assign the correct permission scope for the Managed Identity \u00b6 After successful deployment, head over to the Azure portal . Then complete the following steps: Select the ProvisionGenie resource group Check the successful deployment of the resources Select ProvisionGenie-ManagedIdentity Copy the ObjectID , save it here: copied values In the following script, paste this Object ID as value of $principalId and run the script in Azure cloud shell. ```Azure CLI $principalId = ' ' $graphResourceId = $(az ad sp list --display-name \"Microsoft Graph\" --query [0].objectId --out tsv) Get appRoleIds for Team.Create, Group.ReadWrite.All, Directory.ReadWrite.All, Group.Create, Sites.Manage.All, Sites.ReadWrite.All \u00b6 $graphId = az ad sp list --query \"[?appDisplayName=='Microsoft Graph'].appId | [0]\" --all $appRoleIds = $(az ad sp show --id $graphId --query \"appRoles[?value=='Team.Create'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Group.ReadWrite.All'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Directory.ReadWrite.All'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Group.Create'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Sites.Manage.All'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Sites.ReadWrite.All'].id | [0]\") Loop over all appRoleIds \u00b6 foreach ($appRoleId in $appRoleIds) { $body = \"{'principalId':'$principalId','resourceId':'$graphResourceId','appRoleId':'$appRoleId'}\"; az rest --method post --uri https://graph.microsoft.com/v1.0/servicePrincipals/$principalId/appRoleAssignments --body $body --headers Content-Type=application/json } ``` Check in Azure AD if permissions were set correctly: Open Azure Active Directory Select Enterprise Applications Select Managed Identities from the Application type dropdown menu Select Apply Select ProvisionGenie-ManagedIdentity Select Permissions It should look like this:","title":"4. Azure Logic Apps"},{"location":"deploymentguide/4-deploylogicapps/#4-deployment-of-azure-logic-apps","text":"In the ProvisionGenie-deploy resource group, create a new storage account to store the template files","title":"4. Deployment of Azure Logic Apps"},{"location":"deploymentguide/4-deploylogicapps/#create-storage-account","text":"Open portal.azure.com Select Resource groups Select the ProvisionGenie-deploy Select Create Search for storage account Select Storage account Select Create Fill out the form as shown: (1) Select your Azure subscription (2) Select the ProvisionGenie-deploy resource group (3) Type in a storage account name like provisiongeniedeploy (4) Select your preferred region (5) Select Review + create Review if everything looks ok - note that you see a Validation passed banner Select Create This will take a moment or two, the Azure portal will notify you once this step is completed. Copy the storage account name ( provisiongeniedeploy ), save it here: copied values","title":"Create Storage account"},{"location":"deploymentguide/4-deploylogicapps/#upload-the-deployment-files-into-a-container-in-the-storage-account","text":"in your new Storage account, (1) Select Containers (2) Select + Container (3) Type in templates in the form as a Name (4) Select Create Now upload the template files you can find in ARM folder into the templates container you just created: Select the templates container, then (1) Select Upload (2) Select the template files (3) Select Upload We will now create a Shared Access Token in the Container: (1) Select Shared access tokens (2) Select Generate SAS token and URL (3) Copy the Blob SAS token value, save it here: copied values","title":"Upload the deployment files into a container in the storage account"},{"location":"deploymentguide/4-deploylogicapps/#prepare-your-deployment-script","text":"In the following script, change the $originResourceGroupName value to ProvisionGenie-deploy $storageAccountName value to your storage account name $location value to your preferred location - in case you don't know the name (not: Displayname), you may obtain a list using Azure cloud shell with az account list-locations $QueryString value to the SAS token you just copied Execute the script in Azure cloud shell at shell.azure.com the script will run and prompt you to provide some parameters, they should now all be saved in here: copied values your Subscription ID the Environment ID (you obtained it as Instance URL ) the URL for learning material (if you don't know that for now, you can put https://m365princess.com or any other URL into it) the App ID from your Azure AD app registration the App secret from your Azure AD app registration the Tenant ID from you Azure AD app registration # Set values $originResourceGroupName = \"<your resource group name here>\" $storageAccountName = \"<your storage account name here>\" $containerName = \"templates\" $location = \"<your location here>\" $sasToken = \"<your SAS token here>\" # Create a key $key = ( Get-AzStorageAccountKey -ResourceGroupName $originResourceGroupName -Name $storageAccountName ). Value [ 0 ] $context = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $key $mainTemplateUri = $context . BlobEndPoint + \"$containerName/ARM-template.json\" $targetResourceGroupName = \"ProvisionGenie\" # Deploy New-AzResourceGroupDeployment ` -Name DeployLinkedTemplate ` -ResourceGroupName $targetResourceGroupName ` -TemplateUri $mainTemplateUri ` -QueryString $sasToken ` -verbose","title":"prepare your deployment script"},{"location":"deploymentguide/4-deploylogicapps/#assign-the-correct-permission-scope-for-the-managed-identity","text":"After successful deployment, head over to the Azure portal . Then complete the following steps: Select the ProvisionGenie resource group Check the successful deployment of the resources Select ProvisionGenie-ManagedIdentity Copy the ObjectID , save it here: copied values In the following script, paste this Object ID as value of $principalId and run the script in Azure cloud shell. ```Azure CLI $principalId = ' ' $graphResourceId = $(az ad sp list --display-name \"Microsoft Graph\" --query [0].objectId --out tsv)","title":"Assign the correct permission scope for the Managed Identity"},{"location":"deploymentguide/4-deploylogicapps/#get-approleids-for-teamcreate-groupreadwriteall-directoryreadwriteall-groupcreate-sitesmanageall-sitesreadwriteall","text":"$graphId = az ad sp list --query \"[?appDisplayName=='Microsoft Graph'].appId | [0]\" --all $appRoleIds = $(az ad sp show --id $graphId --query \"appRoles[?value=='Team.Create'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Group.ReadWrite.All'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Directory.ReadWrite.All'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Group.Create'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Sites.Manage.All'].id | [0]\"), $(az ad sp show --id $graphId --query \"appRoles[?value=='Sites.ReadWrite.All'].id | [0]\")","title":"Get appRoleIds for Team.Create, Group.ReadWrite.All, Directory.ReadWrite.All, Group.Create, Sites.Manage.All, Sites.ReadWrite.All"},{"location":"deploymentguide/4-deploylogicapps/#loop-over-all-approleids","text":"foreach ($appRoleId in $appRoleIds) { $body = \"{'principalId':'$principalId','resourceId':'$graphResourceId','appRoleId':'$appRoleId'}\"; az rest --method post --uri https://graph.microsoft.com/v1.0/servicePrincipals/$principalId/appRoleAssignments --body $body --headers Content-Type=application/json } ``` Check in Azure AD if permissions were set correctly: Open Azure Active Directory Select Enterprise Applications Select Managed Identities from the Application type dropdown menu Select Apply Select ProvisionGenie-ManagedIdentity Select Permissions It should look like this:","title":"Loop over all appRoleIds"},{"location":"deploymentguide/5-addtoteams/","text":"5. Add ProvisionGenie to Teams \u00b6 You may now want to add ProvisionGenie to Teams: Open teams.microsoft.com Select Apps Select Built for your org Select the ProvisionGenie app Select Add The result should look like this: Congrats! \ud83e\uddde - You made it- We hope you enjoy ProvisionGenie!","title":"5. Add ProvisionGenie to Teams"},{"location":"deploymentguide/5-addtoteams/#5-add-provisiongenie-to-teams","text":"You may now want to add ProvisionGenie to Teams: Open teams.microsoft.com Select Apps Select Built for your org Select the ProvisionGenie app Select Add The result should look like this: Congrats! \ud83e\uddde - You made it- We hope you enjoy ProvisionGenie!","title":"5. Add ProvisionGenie to Teams"},{"location":"deploymentguide/6-postdeploycleanup/","text":"Post Deployment cleanup \u00b6 Make sure that you exclude copied values from any future commits to this repository- we don't want you to accidentally leak secrets. If you wish, you can now delete storage account in the provisiongenie-deploy resource group or even the entire resource group. In case you want/need to redeploy, you would need to recreate it again to successfully run the deploy script.","title":"6. Post Deployment cleanup"},{"location":"deploymentguide/6-postdeploycleanup/#post-deployment-cleanup","text":"Make sure that you exclude copied values from any future commits to this repository- we don't want you to accidentally leak secrets. If you wish, you can now delete storage account in the provisiongenie-deploy resource group or even the entire resource group. In case you want/need to redeploy, you would need to recreate it again to successfully run the deploy script.","title":"Post Deployment cleanup"},{"location":"deploymentguide/copiedvalues/","text":"Copied values \u00b6 During the deployment process, you will need some values and we recommend to save them in this document or similar AZ AD App registration secret: AZ AD App registration app ID: Tenant ID: Power Apps Instance URL: Azure Subscription ID: Storage account name: Blob SAS token: Managed Identity Object ID: Azure region:","title":"Copied values"},{"location":"deploymentguide/copiedvalues/#copied-values","text":"During the deployment process, you will need some values and we recommend to save them in this document or similar AZ AD App registration secret: AZ AD App registration app ID: Tenant ID: Power Apps Instance URL: Azure Subscription ID: Storage account name: Blob SAS token: Managed Identity Object ID: Azure region:","title":"Copied values"},{"location":"next/braindump/","text":"braindump \u00b6 Connect to Office 365 users connector Adjust navigation Create a new members screen // copy from Channels screen rename all variables add images for popup on members screen create combobox lookup users with: create collection for members adjust description in sidebar TODO CANVAS learning resources for \"add members\" TODO DOCS: update how to build the canvas app TODO APP on App Start error","title":"braindump"},{"location":"next/braindump/#braindump","text":"Connect to Office 365 users connector Adjust navigation Create a new members screen // copy from Channels screen rename all variables add images for popup on members screen create combobox lookup users with: create collection for members adjust description in sidebar TODO CANVAS learning resources for \"add members\" TODO DOCS: update how to build the canvas app TODO APP on App Start error","title":"braindump"},{"location":"next/cli-instructions/","text":"App registration to access Dataverse tables using Azure CLI \u00b6 Open shell.azure.com to register the application run ```Azure CLI az ad app create --display-name 78ce3f0f-a1ce-49c2-8cde-64b5c0896db4 --available-to-other-tenants false save the appId \u00b6 $adappid =(az ad app list --display-name Luise3 --query [0].appId --out tsv --all) create an app secret, run \u00b6 az ad app credential reset --id $adappId --append In the output, you will get four values for - **AppId**, - **name** (equals **AppId**), - **password** (this is your App secret) and - **tenant** (this is your TenantID). ```azurecli #Set API permissions for user impersonation in Dynamics CRM az ad app permission add --id $adappid --api 00000007-0000-0000-c000-000000000000 --api-permissions 78ce3f0f-a1ce-49c2-8cde-64b5c0896db4=Scope Note, that 00000007-0000-0000-c000-000000000000 is Dynamics CRM and 78ce3f0f-a1ce-49c2-8cde-64b5c0896db4=Scope is user_impersonation which we need to act on behalf of a user. now grant admin consent by running az ad app permission grant --id $adappid --api 00000007-0000-0000-c000-000000000000 That's it! New resource group with Azure CLI \u00b6 open shell.azure.com run ```Azure CLI az group create -n --location now create the second resource group ```Azure CLI az group create -n <ProvisionGenie-deploy> --location <your-location-here> Create a storage account az storage account create -n pgstorage -g provisionGenie-deploy -l westeurope --sku Standard_LRS Create container","title":"Cli instructions"},{"location":"next/cli-instructions/#app-registration-to-access-dataverse-tables-using-azure-cli","text":"Open shell.azure.com to register the application run ```Azure CLI az ad app create --display-name 78ce3f0f-a1ce-49c2-8cde-64b5c0896db4 --available-to-other-tenants false","title":"App registration to access Dataverse tables using Azure CLI"},{"location":"next/cli-instructions/#save-the-appid","text":"$adappid =(az ad app list --display-name Luise3 --query [0].appId --out tsv --all)","title":"save the appId"},{"location":"next/cli-instructions/#create-an-app-secret-run","text":"az ad app credential reset --id $adappId --append In the output, you will get four values for - **AppId**, - **name** (equals **AppId**), - **password** (this is your App secret) and - **tenant** (this is your TenantID). ```azurecli #Set API permissions for user impersonation in Dynamics CRM az ad app permission add --id $adappid --api 00000007-0000-0000-c000-000000000000 --api-permissions 78ce3f0f-a1ce-49c2-8cde-64b5c0896db4=Scope Note, that 00000007-0000-0000-c000-000000000000 is Dynamics CRM and 78ce3f0f-a1ce-49c2-8cde-64b5c0896db4=Scope is user_impersonation which we need to act on behalf of a user. now grant admin consent by running az ad app permission grant --id $adappid --api 00000007-0000-0000-c000-000000000000 That's it!","title":"create an app secret, run"},{"location":"next/cli-instructions/#new-resource-group-with-azure-cli","text":"open shell.azure.com run ```Azure CLI az group create -n --location now create the second resource group ```Azure CLI az group create -n <ProvisionGenie-deploy> --location <your-location-here> Create a storage account az storage account create -n pgstorage -g provisionGenie-deploy -l westeurope --sku Standard_LRS Create container","title":"New resource group with Azure CLI"}]}